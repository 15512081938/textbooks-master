{"sections":[{"id":"interactivelesson","title":"Interactive Lesson","status":"","background":"","goals":13,"duration":70,"steps":["parametersandarguments","noneitsnothing","defaultreturn","defaultarguments","usingkeywordandpositionalarguments","keywordarguments","dontusemutabledefaultarguments","usingnoneasasentinel","unpackingmultiplereturns","positionalargumentunpacking","keywordargumentunpacking","usingbothkeywordandpositionalunpacking","passingcontainersasarguments","review"]},{"id":"mutiple_choice_quiz","title":"Mutiple Choice Quiz","status":"","background":"","goals":7,"duration":10,"steps":["step-14","step-15","step-16","step-17","step-18","step-19","step-20"]},{"id":"freedomproject","title":"Freedom Project","status":"","background":"","goals":0,"duration":15,"steps":["thenile"]},{"id":"video","title":"Video","status":"","background":"","goals":0,"duration":5,"steps":["step-22"]}],"steps":[{"section":"interactivelesson","id":"parametersandarguments","goals":["next-0"],"html":"<x-step id=\"parametersandarguments\" goals=\"next-0\"><h2>Parameters and Arguments</h2><p><span class=\"sentence\">Python’s functions offer us a very expressive syntax. </span><span class=\"sentence\">We’re going to look into some of the finer details of how functions in Python work and some techniques we can use to be more intuitive while writing and calling functions.</span></p><p><span class=\"sentence\">First, let’s consider some definitions:</span></p><ul> <li><span class=\"sentence\">A parameter is a variable in the definition of a function.</span></li><li><span class=\"sentence\">An argument is the value being passed into a function call.</span></li><li><span class=\"sentence\">A function definition begins with <strong>def</strong> and contains the entire following indented block.</span></li><li><span class=\"sentence\">And function calls are the places a function is invoked, with parentheses, after its definition</span></li></ul> <p><span class=\"sentence\">Let’s see this in a block of code:</span></p><pre class=\"language-python\"><code># The \"def\" keyword is the start of a function definition\ndef function_name(parameter1, parameter2):\n  # The placeholder variables used inside a function definition are called parameters\n  print(parameter1)\n  return parameter2\n# The outdent signals the end of the function definition\n\n# \"Arguments\" are the values passed into a function call\nargument1 = \"argument 1\"\nargument2 = \"argument 2\"\n\n# A function call uses the functions name with a pair of parentheses\n# and can return a value\nreturn_val = function_name(argument1, argument2)</code></pre><p><span class=\"sentence\">In the above code we defined the function <strong>function_name</strong> that takes two parameters, <strong>parameter1</strong> and <strong>parameter2</strong>. </span><span class=\"sentence\">We then create two variables with the values <strong>\"argument 1\"</strong> and <strong>\"argument 2\"</strong> and proceed to call <strong>function_name</strong> with the two arguments.</span></p><p><span class=\"sentence\">Some of this terminology can be used inconsistently between schools, people, and businesses. </span><span class=\"sentence\">Some people don’t differentiate between “parameter” and “argument” when speaking. </span><span class=\"sentence\">It’s useful here because we’re going to be looking at a lot of behavior that looks very similar in a function definition and a function call, but will be subtly different. </span><span class=\"sentence\">But the distinction is sometimes unnecessary, so don’t get too hung up if something is called a “parameter” that should be an “argument” or vice versa.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">In script.py call the function <strong>play_record</strong> with the argument <strong>next_album</strong>.</span></p><p><span class=\"sentence\"> What’s the name of the parameter that <strong>play_record</strong> takes?</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> The name of the parameter is <strong>album</strong>. </span><span class=\"sentence\">The name of the argument is <strong>next_album</strong>.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">from record_library import place_record, rotate_record, drop_needle\n\ndef play_record(album):\n  place_record(album)\n  rotate_record(album)\n  drop_needle(album)\n\nnext_album = \"Blondie / Parallel Lines\"</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"noneitsnothing","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"noneitsnothing\" goals=\"next-0\"><h2>None: It's Nothing!</h2><p><span class=\"sentence\">How do you define a variable that you can’t assign a value to yet? </span><span class=\"sentence\">You use <strong>None</strong>.</span></p><p><span class=\"sentence\"><strong>None</strong> is a special value in Python. </span><span class=\"sentence\">It is unique (there can’t be two different <strong>Nones</strong>) and immutable (you can’t update <strong>None</strong> or assign new attributes to it).</span></p><pre class=\"language-python\"><code>none_var = None\nif none_var:\n  print(\"Hello!\")\nelse:\n  print(\"Goodbye\")\n\n# Prints \"Goodbye\"</code></pre><p><span class=\"sentence\"><strong>None</strong> is falsy, meaning that it evaluates to <strong>False</strong> in an <strong>if</strong> statement, which is why the above code prints “Goodbye”. </span><span class=\"sentence\"><strong>None</strong> is also unique, which means that you can test if something is <strong>None</strong> using the <strong>is</strong> keyword.</span></p><pre class=\"language-python\"><code># first we define session_id as None\nsession_id = None\n\nif session_id is None:\n  print(\"session ID is None!\")\n  # this prints out \"session ID is None!\"\n\n# we can assign something to session_id\nif active_session:\n  session_id = active_session.id\n\n# but if there's no active_session, we don't send sensitive data\nif session_id is not None:\n  send_sensitive_data(session_id)</code></pre><p><span class=\"sentence\">Above we initialize our <strong>session_id</strong> to <strong>None</strong>, then set our <strong>session_i</strong>d if there is an active session. </span><span class=\"sentence\">Since <strong>session_id</strong> could either be <strong>None</strong> we check if <strong>session_id</strong> is <strong>None</strong> before sending our sensitive data.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">Grab a new review using <strong>get_next_review()</strong>. </span><span class=\"sentence\">Save the results into a variable called <strong>review</strong>.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Check if there is a <strong>review</strong> by comparing it against <strong>None</strong>. </span><span class=\"sentence\">If <strong>review</strong> contains a value that isn’t <strong>None</strong>, submit it by calling the function <strong>submit_review()</strong> with <strong>review</strong> as an argument.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">from review_lib import get_next_review, submit_review\n\n# define review here!\n\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"defaultreturn","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"defaultreturn\" goals=\"next-0\"><h2>Default Return</h2><p><span class=\"sentence\">What does a function return when it doesn’t return anything? </span><span class=\"sentence\">This sounds like a riddle, but there is a correct answer. </span><span class=\"sentence\">A Python function that does not have any explicit <strong>return</strong> statement will return <strong>None</strong> after completing. </span><span class=\"sentence\">This means that all functions in Python return something, whether it’s explicit or not. </span><span class=\"sentence\">For example:</span></p><pre class=\"language-python\"><code>def no_return():\n  print(\"You've hit the point of no return\")\n  # notice no return statement\n\nhere_it_is = no_return()\n\nprint(here_it_is)\n# Prints out \"None\"</code></pre><p><span class=\"sentence\">Above we defined a function called <strong>no_return()</strong> and saved the result to a variable <strong>here_it_is</strong>. </span><span class=\"sentence\">When we <strong>print()</strong> the value of <strong>here_it_is</strong> we get <strong>None</strong>, referring to Python’s None. </span><span class=\"sentence\">It’s possible to make this syntax even more explicit — a <strong>return</strong> statement without any value returns <strong>None</strong> also.</span></p><pre class=\"language-python\"><code>def fifty_percent_off(item):\n  # Check if item.cost exists\n  if hasattr(item, 'cost'):\n    return item.cost / 2\n\n  # If not, return None \n  return\n\nsale_price = fifty_percent_off(product)\n\nif sale_price is None:\n  print(\"This product is not for sale!\")</code></pre><p><span class=\"sentence\">Here we have implemented a function that returns the cost of a product with “50% Off” (or “half price”). </span><span class=\"sentence\">We check if the <strong>item</strong> passed to our function has a <strong>cost</strong> attribute. </span><span class=\"sentence\">If it exists, we return half the cost. </span><span class=\"sentence\">If not, we simply <strong>return</strong>, which returns <strong>None</strong>.</span></p><p><span class=\"sentence\">When we plug a product into this function, we can expect two possibilities: </span><span class=\"sentence\">the first is that the <strong>item</strong> has a cost and this function returns half of that. </span><span class=\"sentence\">The other is that <strong>item</strong> does not have a listed cost and so the function returns <strong>None</strong>. </span><span class=\"sentence\">We can put error handling in the rest of our code, if we get <strong>None</strong> back from this function that means whatever we’re looking at isn’t for sale!</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">Lots of everyday Python functions return <strong>None</strong>. </span><span class=\"sentence\">What’s the return value of a call to <strong>print()</strong>? </span><span class=\"sentence\">Since <strong>print()</strong> is a function it must return something.</span></p><p><span class=\"sentence\"> Create a variable called <strong>prints_return</strong> and set it equal to a print statement. </span><span class=\"sentence\">Make sure to give the print statement parentheses and give it an argument (like “hi!”).</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> It’s a weird request, but create a variable equal to a <strong>print()</strong> statement.</span></p><pre class=\"language-python\"><code> return_value = print(\"Hi there!\")</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now print out <strong>prints_return</strong>.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Inside script.py is a list called <strong>sort_this_list</strong>. </span><span class=\"sentence\">Create a new variable called <strong>list_sort_return</strong> and set it equal to <strong>sort_this_list.sort()</strong>.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Write the following code to create the <strong>list_sort_return</strong> variable:</span></p><pre class=\"language-python\"><code> list_sort_return = sort_this_list.sort()</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">What do you expect <strong>list_sort_return</strong> to contain?</span></p><p><span class=\"sentence\"> Print out <strong>list_sort_return</strong>.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> It might be surprising, but <strong>.sort()</strong> sorts a list in place. </span><span class=\"sentence\">Python has a different function, <strong>sorted()</strong> that takes a list as an argument and returns the sorted list.</span></p><p><span class=\"sentence\"> What’s in common with these two functions that return <strong>None</strong>? </span><span class=\"sentence\">They both have side-effects besides returning a value.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\"># store the result of this print() statement in the variable prints_return\nprint(\"What does this print function return?\")\n\n# print out the value of prints_return\n\n\n# call sort_this_list.sort() and save that in list_sort_return\nsort_this_list = [14, 631, 4, 51358, 50000000]\n\n\n# print out the value of list_sort_return\n\n\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"defaultarguments","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"defaultarguments\" goals=\"next-0\"><h2>Default Arguments</h2><p><span class=\"sentence\">Function arguments are required in Python. </span><span class=\"sentence\">So a standard function definition that defines two parameters requires two arguments passed into the function.</span></p><pre class=\"language-python\"><code># Function definition with two required parameters\ndef create_user(username, is_admin):\n  create_email(username)\n  set_permissions(is_admin)\n\n# Function call with all two required arguments\nuser1 = create_user('johnny_thunder', True)\n\n# Raises a \"TypeError: Missing 1 required positional argument\"\nuser2 = create_user('djohansen')</code></pre><p><span class=\"sentence\">Above we defined our function, <strong>create_user</strong>, with two parameters. </span><span class=\"sentence\">We first called it with two arguments, but then tried calling it with only one argument and got an error. </span><span class=\"sentence\">What if we had sensible defaults for this argument?</span></p><p><span class=\"sentence\">Not all function arguments in Python need to be required. </span><span class=\"sentence\">If we give a default argument to a Python function that argument won’t be required when we call the function.</span></p><pre class=\"language-python\"><code># Function defined with one required and one optional parameter\ndef create_user(username, is_admin=False):\n  create_email(username)\n  set_permissions(is_admin)\n\n# Calling with two arguments uses the default value for is_admin\nuser2 = create_user('djohansen')</code></pre><p><span class=\"sentence\">Above we defined <strong>create_user</strong> with a default argument for <strong>is_admin</strong>, so we can call that function with only the one argument <strong>'djohansen'</strong>. </span><span class=\"sentence\">It assumes the default value for <strong>is_admin</strong>: </span><span class=\"sentence\"><strong>False</strong>. </span><span class=\"sentence\">We can make both of our parameters have a default value (therefore making them all optional).</span></p><pre class=\"language-python\"><code># We can make all three parameters optional\ndef create_user(username=None, is_admin=False):\n  if username is None:\n    username = \"Guest\"\n  else:\n    create_email(username)\n  set_permissions(is_admin)\n\n# So we can call with just one value\nuser3 = create_user('ssylvain')\n# Or no value at all, which would create a Guest user\nuser4 = create_user()</code></pre><p><span class=\"sentence\">Above we define the function with all optional parameters, if we call it with one argument that gets interpreted as <strong>username</strong>. </span><span class=\"sentence\">We can call it without any arguments at all, which would only use the default values.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">In script.py there is a function called <strong>make_folders()</strong>. </span><span class=\"sentence\">We want to add a default argument to the <strong>nest</strong> parameter in <strong>make_folders()</strong>.</span></p><p><span class=\"sentence\"> Set it so that if we call <strong>make_folders()</strong> without an argument for <strong>nest</strong> the function assumes it gets a value of <strong>False</strong>.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">import os\n\ndef make_folders(folders_list, nest):\n  if nest:\n    \"\"\"\n    Nest all the folders, like\n    ./Music/fun/parliament\n    \"\"\"\n    path_to_new_folder = \".\"\n    for folder in folders_list:\n      path_to_new_folder += \"/{}\".format(folder)\n      try:\n        print(path_to_new_folder)\n        os.makedirs(\"./\" + path_to_new_folder)\n      except FileExistsError:\n        continue\n  else:\n    \"\"\"\n    Makes all different folders, like\n    ./Music/ ./fun/ and ./parliament/\n    \"\"\"\n    for folder in folders_list:\n      try:\n        os.makedirs(folder)\n\n      except FileExistsError:\n        continue\n\nmake_folders(['Music', 'fun', 'parliament'])\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"usingkeywordandpositionalarguments","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"usingkeywordandpositionalarguments\" goals=\"next-0\"><h2>Using Keyword and Positional Arguments</h2><p><span class=\"sentence\">Not all of your arguments need to have default values. </span><span class=\"sentence\">But Python will only accept functions defined with their parameters in a specific order. </span><span class=\"sentence\">The required parameters need to occur before any parameters with a default argument.</span></p><pre class=\"language-python\"><code># Raises a TypeError\ndef create_user(is_admin=False, username, password):\n  create_email(username, password)\n  set_permissions(is_admin)</code></pre><p><span class=\"sentence\">In the above code, we attempt to define a default argument for <strong>is_admin</strong> without defining default arguments for the later parameters: </span><span class=\"sentence\"><strong>username</strong> and <strong>password</strong>.</span></p><p><span class=\"sentence\">If we want to give <strong>is_admin</strong> a default argument, we need to list it last in our function definition:</span></p><pre class=\"language-python\"><code># Works perfectly\ndef create_user(username, password, is_admin=False):\n  create_email(username, password)\n  set_permissions(is_admin)</code></pre><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">In script.py the function <strong>get_id</strong> tries to define a parameter with a default argument before a required parameter.</span></p><p><span class=\"sentence\"> Update the function signature of <strong>get_id</strong> so that <strong>website</strong> comes second and <strong>html_id</strong> comes first.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">import reqs as requests\nfrom bs4 import BeautifulSoup\n\ndef get_id(website=\"http://coolsite.com\", html_id):\n  request = requests.get(website)\n  parsed_html = BeautifulSoup(website.content, features=\"html.parser\")\n  return parsed_html.find(id_=html_id)\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"keywordarguments","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"keywordarguments\" goals=\"next-0\"><h2>Keyword Arguments</h2><p><span class=\"sentence\">When we call a function in Python, we need to list the arguments to that function to match the order of the parameters in the function definition. </span><span class=\"sentence\">We don’t necessarily need to do this if we pass keyword arguments.</span></p><p><span class=\"sentence\">We use keyword arguments by passing arguments to a function with a special syntax that uses the names of the parameters. </span><span class=\"sentence\">This is useful if the function has many optional default arguments or if the order of a function’s parameters is hard to tell. </span><span class=\"sentence\">Here’s an example of a function with a lot of optional arguments.</span></p><pre class=\"language-python\"><code># Define a function with a bunch of default arguments\ndef log_message(logging_style=\"shout\", message=\"\", font=\"Times\", date=None):\n  if logging_style == 'shout':\n    # capitalize the message\n    message = message.upper()\n  print(message, date)\n\n# Now call the function with keyword arguments\nlog_message(message=\"Hello from the past\", date=\"November 20, 1693\")</code></pre><p><span class=\"sentence\">Above we defined <strong>log_message()</strong>, which can take from 0 to 4 arguments. </span><span class=\"sentence\">Since it’s not clear which order the four arguments might be defined in, we can use the parameter names to call the function. </span><span class=\"sentence\">Notice that in our function call we use this syntax: </span><span class=\"sentence\"><strong>message=\"Hello from the past\"</strong>. </span><span class=\"sentence\">The key word <strong>message</strong> here needs to be the name of the parameter we are trying to pass the argument to.s</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\">In script.py we’ve defined a <strong>draw_shape()</strong> function that will draw a shape to the terminal! </span><span class=\"sentence\">Call <strong>draw_shape()</strong> with <strong>\"m\"</strong> as the <strong>character</strong> and <strong>line_breaks</strong> set to <strong>False</strong>.</span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">import shapes\n\ndef draw_shape(shape_name=\"box\", character=\"x\", line_breaks=True):\n  shape = shapes.draw_shape(shape_name, character)\n  if not line_breaks:\n    print(shape[1:-1])\n  else:\n    print(shape)\n\n# call draw_shape() with keyword arguments here:</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"dontusemutabledefaultarguments","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"dontusemutabledefaultarguments\" goals=\"next-0\"><h2>Don't Use Mutable Default Arguments</h2><p><span class=\"sentence\">When writing a function with default arguments, it can be tempting to include an empty list as a default argument to that function. </span><span class=\"sentence\">Let’s say you have a function called <strong>populate_list</strong> that has two required arguments, but it’s easy to see that we might want to give it some default arguments in case we don’t have either <strong>list_to_populate</strong> or <strong>length</strong> every time. </span><span class=\"sentence\">So we’d give it these defaults:</span></p><pre class=\"language-python\"><code>def populate_list(list_to_populate=[], length=1):\n  for num in range(length):\n    list_to_populate.append(num)\n  return list_to_populate</code></pre><p><span class=\"sentence\">It’s reasonable to believe that <strong>list_to_populate</strong> will be given an empty list every time it’s called. </span><span class=\"sentence\">This isn’t the case! </span><span class=\"sentence\"><strong>list_to_populate</strong> will be given a new list once, in its definition, and all subsequent function calls will modify the same list. </span><span class=\"sentence\">This will happen:</span></p><pre class=\"language-python\"><code>returned_list = populate_list(length=4)\nprint(returned_list)\n# Prints [0, 1, 2, 3] -- this is expected\n\nreturned_list = populate_list(length=6)\nprint(returned_list)\n# Prints [0, 1, 2, 3, 0, 1, 2, 3, 4, 5] -- this is a surprise!</code></pre><p><span class=\"sentence\">When we call <strong>populate_list</strong> a second time we’d expect the list <strong>[0, 1, 2, 3, 4, 5]</strong>. </span><span class=\"sentence\">But the same list is used both times the function is called, causing some side-effects from the first function call to creep into the second. </span><span class=\"sentence\">This is because a list is a mutable object.</span></p><p><span class=\"sentence\">A mutable object refers to various data structures in Python that are intended to be mutated, or changed. </span><span class=\"sentence\">A list has append and remove operations that change the nature of a list. </span><span class=\"sentence\">Sets and dictionaries are two other mutable objects in Python.</span></p><p><span class=\"sentence\">It might be helpful to note some of the objects in Python that are not mutable (and therefore OK to use as default arguments). </span><span class=\"sentence\"><strong>int</strong>, <strong>float</strong>, and other numbers can’t be mutated (arithmetic operations will return a new number). </span><span class=\"sentence\"><strong>tuple</strong>s are a kind of immutable list. </span><span class=\"sentence\">Strings are also immutable — operations that update a string will all return a completely new string.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">In script.py we’ve written a helper function that adds a new menu item to an order in a point-of-sale system. </span><span class=\"sentence\">As you can see, we can start a new order by calling <strong>update_order</strong> without an argument for <strong>current_order</strong>. </span><span class=\"sentence\">Unfortunately, there’s a bug in our code causing some previous order contents to show up on other people’s bills!</span></p><p><span class=\"sentence\"> First, try to guess what the output of this code will be. </span><span class=\"sentence\">Then, run <strong>script.py</strong>.</span></p><p><span class=\"sentence\"> We’ll fix this function in the next exercise, if you want more of an explanation of what’s happening here, check out the hint!</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Two sodas and a burger! </span><span class=\"sentence\">And all the customer wanted was a soda. </span><span class=\"sentence\">You’ll notice, if you print out <strong>order1</strong> it’s the same exact list as <strong>order2</strong>. </span><span class=\"sentence\">Any updates to one will update the other (and will affect future calls of <strong>update_order</strong>).</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">def update_order(new_item, current_order=[]):\n  current_order.append(new_item)\n  return current_order\n\n# First order, burger and a soda\norder1 = update_order({'item': 'burger', 'cost': '3.50'})\norder1 = update_order({'item': 'soda', 'cost': '1.50'}, order1)\n\n# Second order, just a soda\norder2 = update_order({'item': 'soda', 'cost': '1.50'})\n\n# What's in that second order again?\nprint(order2)\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"usingnoneasasentinel","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"usingnoneasasentinel\" goals=\"next-0\"><h2>Using None as a Sentinel</h2><p><span class=\"sentence\">So if we can’t use a list as a default argument for a function, what can we use? </span><span class=\"sentence\">If we want an empty list, we can use <strong>None</strong> as a special value to indicate we did not receive anything. </span><span class=\"sentence\">After we check whether an argument was provided we can instantiate a new list if it wasn’t.</span></p><pre class=\"language-python\"><code>def add_author(authors_books, current_books=None):\n  if current_books is None:\n    current_books = []\n\n  current_books.extend(authors_books)\n  return current_books</code></pre><p><span class=\"sentence\">In the above function, we accept <strong>current_books</strong> a value expected to be a list. </span><span class=\"sentence\">But we don’t require it. </span><span class=\"sentence\">If someone calls <strong>add_author()</strong> without giving an argument for <strong>current_books</strong>, we supply an empty list. </span><span class=\"sentence\">This way multiple calls to <strong>add_author</strong> won’t include data from previous calls to <strong>add_author</strong>.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">Update the function so that calls to <strong>update_order</strong> don’t have side-effects — no order should affect other orders.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Change the default argument to <strong>current_order</strong> to <strong>None</strong>, and then instantiate a new list inside of <strong>update_order()</strong>:</span></p><pre class=\"language-python\"><code> def update_order(new_item, current_order=None):\n   if current_order is None:\n     current_order = []</code></pre></span></li></ol> </div><div style=\"width: 320px\"> </div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"unpackingmultiplereturns","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"unpackingmultiplereturns\" goals=\"next-0\"><h2>Unpacking Multiple Returns</h2><p><span class=\"sentence\">A Python function can return multiple things. </span><span class=\"sentence\">This is especially useful in cases where bundling data into a different structure (a dictionary or a list, for instance) would be excessive. </span><span class=\"sentence\">In Python we can return multiple pieces of data by separating each variable with a comma:</span></p><pre class=\"language-python\"><code>def multiple_returns(cool_num1, cool_num2):\n  sum_nums = cool_num1 + cool_num2\n  div_nums = cool_num1 / cool_num2\n  return sum_nums, div_nums</code></pre><p><span class=\"sentence\">Above we created a function that returns two results, <strong>sum_nums</strong> and <strong>div_nums</strong>. </span><span class=\"sentence\">What happens when we call the function?</span></p><pre class=\"language-python\"><code>sum_and_div = multiple_returns(20, 10)\n\nprint(sum_and_div)\n# Prints \"(30, 2)\"\n\nprint(sum_and_div[0])\n# Prints \"30\"</code></pre><p><span class=\"sentence\">So we get those two values back in what’s called a tuple, an immutable list-like object indicated by parentheses. </span><span class=\"sentence\">We can index into the tuple the same way as a list and so <strong>sum_and_div[0]</strong> will give us our <strong>sum_nums</strong> value and <strong>sum_and_div[1]</strong> will produce our <strong>div_nums</strong> value.</span></p><p><span class=\"sentence\">What if we wanted to save these two results in separate variables? </span><span class=\"sentence\">Well we can by unpacking the function return. </span><span class=\"sentence\">We can list our new variables, comma-separated, that correspond to the number of values returned:</span></p><pre class=\"language-python\"><code>sum, div = sum_and_div(18, 9)\n\nprint(sum)\n# Prints \"27\"\n\nprint(div)\n# Prints \"2\"</code></pre><p><span class=\"sentence\">Above we were able to unpack the two values returned into separate variables.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\">In script.py you’ll find the definition of the function <strong>scream_and_whisper()</strong>. </span><span class=\"sentence\">Call the function with a string of your choice and store the results in <strong>the_scream</strong> and <strong>the_whisper</strong>.</span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">def scream_and_whisper(text):\n    scream = text.upper()\n    whisper = text.lower()\n    return scream, whisper\n\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"positionalargumentunpacking","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"positionalargumentunpacking\" goals=\"next-0\"><h2>Positional Argument Unpacking</h2><p><span class=\"sentence\">We don’t always know how many arguments a function is going to receive, and sometimes we want to handle any possibility that comes at us. </span><span class=\"sentence\">Python gives us two methods of unpacking arguments provided to functions. </span><span class=\"sentence\">The first method is called positional argument unpacking, because it unpacks arguments given by position. </span><span class=\"sentence\">Here’s what that looks like:</span></p><pre class=\"language-python\"><code>def shout_strings(*args):\n  for argument in args:\n    print(argument.upper())\n\nshout_strings(\"hi\", \"what do we have here\", \"cool, thanks!\")\n# Prints out:\n# \"HI\"\n# \"WHAT DO WE HAVE HERE\"\n# \"COOL, THANKS!\"</code></pre><p><span class=\"sentence\">In <strong>shout_strings()</strong> we use a single asterisk (<strong>*</strong>) to indicate we’ll accept any number of positional arguments passed to the function. </span><span class=\"sentence\">Our parameter <strong>args</strong> is a tuple of all of the arguments passed. </span><span class=\"sentence\">In this case <strong>args</strong> has three values inside, but it can have many more (or fewer).</span></p><p><span class=\"sentence\">Note that <strong>args</strong> is just a parameter name, and we aren’t limited to that name (although it is rather standard practice). </span><span class=\"sentence\">We can also have other positional parameters before our <strong>*args</strong> parameter. </span><span class=\"sentence\">We can’t, as we’ll see, :</span></p><pre class=\"language-python\"><code>def truncate_sentences(length, *sentences):\n  for sentence in sentences:\n    print(sentence[:length])\n\ntruncate_sentences(8, \"What's going on here\", \"Looks like we've been cut off\")\n# Prints out:\n# \"What's g\"\n# \"Looks li\"</code></pre><p><span class=\"sentence\">Above we defined a function <strong>truncate_sentences</strong> that takes a <strong>length</strong> parameter and also any number of <strong>sentences</strong>. </span><span class=\"sentence\">The function prints out the first <strong>length</strong> many characters of each <strong>sentence</strong> in <strong>sentences</strong>.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">The Python library <strong>os.path</strong> has a function called <strong>join()</strong>. </span><span class=\"sentence\"><strong>join()</strong> takes an arbitrary number of paths as arguments.</span></p><p><span class=\"sentence\"> Use the <strong>join()</strong> function to join all three of the path segments, and print out the results!</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Write your own function, called <strong>myjoin()</strong> which takes an arbitrary number of strings and appends them all together, similar to <strong>os.path.join()</strong>.</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">from os.path import join\n\npath_segment_1 = \"/Home/User\"\npath_segment_2 = \"Codecademy/videos\"\npath_segment_3 = \"cat_videos/surprised_cat.mp4\"\n\n# join all three of the paths here!</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"keywordargumentunpacking","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"keywordargumentunpacking\" goals=\"next-0\"><h2>Keyword Argument Unpacking</h2><p><span class=\"sentence\">Python doesn’t stop at allowing us to accept unlimited positional parameters, it gives us the power to define functions with unlimited keyword parameters too. </span><span class=\"sentence\">The syntax is very similar, but uses two asterisks (<strong>**</strong>) instead of one. </span><span class=\"sentence\">Instead of <strong>args</strong>, we call this <strong>kwargs</strong> — as a shorthand for keyword arguments.</span></p><pre class=\"language-python\"><code>def arbitrary_keyword_args(**kwargs):\n  print(type(kwargs))\n  print(kwargs)\n  # See if there's an \"anything_goes\" keyword arg\n  # and print it\n  print(kwargs.get('anything_goes'))\n\narbitrary_keyword_args(this_arg=\"wowzers\", anything_goes=101)\n</code></pre><p><span class=\"sentence\">As you can see, <strong>**kwargs</strong> gives us a dictionary with all the keyword arguments that were passed to <strong>arbitrary_keyword_args</strong>. </span><span class=\"sentence\">We can access these arguments using standard dictionary methods.</span></p><p><span class=\"sentence\">Since we’re not sure whether a keyword argument will exist, it’s probably best to use the dictionary’s <strong>.get()</strong> method to safely retrieve the keyword argument. </span><span class=\"sentence\">Do you remember what <strong>.get()</strong> returns if the key is not in the dictionary? </span><span class=\"sentence\">It’s <strong>None</strong>!</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">The string <strong>.format()</strong> method can utilize keyword argument syntax if you give placeholder names in curly braces in a string. </span><span class=\"sentence\">For example:</span></p><pre class=\"language-python\"><code> \"{place} is {adjective} this time of year.\".format(place=\"New York\", adjective=\"quite cold, actually\")</code></pre><p><span class=\"sentence\"> Format the string in <strong>script.py</strong> within the <strong>print()</strong> statement. </span><span class=\"sentence\">Give arguments for the placeholders given.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\"><strong>create_products()</strong> takes a dictionary object and iterates over it, we can change it so that it uses keyword arguments instead. </span><span class=\"sentence\">Update this function signature so <strong>products_dict</strong> contains all the keyword arguments passed to <strong>create_products()</strong>.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> We just need to give <strong>products_dict</strong> a preceeding <strong>**</strong> for it to still be a dictionary but be populated by keyword arguments.</span></p><pre class=\"language-python\"><code> def cool_function(**kwarg_dictionary):\n     pass</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Update the call to <strong>create_products()</strong> to pass in each of those dictionary items as a keyword argument instead.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Changing the arguments to be keyword parameters means taking away the curly braces, passing the keys without quotes, and using <strong>=</strong> instead of <strong>:</strong>:</span></p><pre class=\"language-python\"><code> create_products(Football=12, BassGuitar=90)</code></pre></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\"># Checkpoint 1\nprint(\"My name is {name} and I'm feeling {feeling}.\".format(\n\t# add your arguments to .format()\n))\n\n# Checkpoint 2\nfrom products import create_product\n\n# Update create_products() to take arbitrary keyword arguments\ndef create_products(products_dict):\n  for name, price in products_dict.items():\n    create_product(name, price)\n\n# Checkpoint 3\n# Update the call to `create_products()` to pass in this dictionary as a series of keyword\ncreate_products({\n  'Baseball': '3',\n  'Shirt': '14',\n  'Guitar': '70',\n})</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"usingbothkeywordandpositionalunpacking","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"usingbothkeywordandpositionalunpacking\" goals=\"next-0\"><h2>Using Both Keyword and Positional Unpacking</h2><p><span class=\"sentence\">This keyword argument unpacking syntax can be used even if the function takes other parameters. </span><span class=\"sentence\">However, the parameters must be listed in this order:</span></p><ul> <li><span class=\"sentence\">All named positional parameters</span></li><li><span class=\"sentence\">An unpacked positional parameter (<strong>*args</strong>)</span></li><li><span class=\"sentence\">All named keyword parameters</span></li><li><span class=\"sentence\">An unpacked keyword parameter (<strong>**kwargs</strong>)</span></li></ul> <p><span class=\"sentence\">Here’s a function with all possible types of parameter:</span></p><pre class=\"language-python\"><code>def main(filename, *args, user_list=None, **kwargs):\n  if user_list is None:\n    user_list = []\n\n  if '-a' in args:\n    user_list = all_users()\n\n  if kwargs.get('active'):\n    user_list = [user for user_list if user.active]\n\n  with open(filename) as user_file:\n    user_file.write(user_list)</code></pre><p><span class=\"sentence\">Looking at the signature of <strong>main()</strong> we define four different kinds of parameters. </span><span class=\"sentence\">The first, <strong>filename</strong> is a normal required positional parameter. </span><span class=\"sentence\">The second, <strong>*args</strong>, is all positional arguments given to a function after that organized as a tuple in the parameter args. </span><span class=\"sentence\">The third, <strong>user_list</strong>, is a keyword parameter with a default value. </span><span class=\"sentence\">Lastly, <strong>**kwargs</strong> is all other keyword arguments assembled as a dictionary in the parameter <strong>kwargs</strong>.</span></p><p><span class=\"sentence\">A possible call to the function could look like this:</span></p><pre class=\"language-python\"><code>main(\"files/users/userslist.txt\", \n     \"-d\", \n     \"-a\", \n     save_all_records=True, \n     user_list=current_users)</code></pre><p><span class=\"sentence\">In the body of <strong>main()</strong> these arguments would look like this:</span></p><ul> <li><span class=\"sentence\"><strong>filename == \"files/users/userslist.txt\"</strong></span></li><li><span class=\"sentence\"><strong>args == ('-d', '-a)</strong></span></li><li><span class=\"sentence\"><strong>user_list == current_users</strong></span></li><li><span class=\"sentence\"><strong>kwargs == {'save_all_records': True}</strong></span></li></ul> <p><span class=\"sentence\">We can use all four of these kinds of parameters to create functions that handle a lot of possible arguments being passed to them.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">In script.py you’ll find the function <strong>remove()</strong> has three parameters: </span><span class=\"sentence\">the required positional <strong>filename</strong>, the arbitrary positional <strong>args</strong>, and the arbitrary keyword <strong>kwargs</strong>.</span></p><p><span class=\"sentence\"> Before returning the text, we want to remove all arguments passed as positional arguments from the text. </span><span class=\"sentence\">Using <strong>text.replace()</strong> change every <strong>arg</strong> in <strong>args</strong> into an empty string <strong>\"\"</strong>.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Iterate through <strong>args</strong> with a for loop and use <strong>replace()</strong> to remove text:</span></p><pre class=\"language-python\"><code> for arg in args:\n   text.replace(arg, '')</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now iterate over every <strong>kwarg</strong> and <strong>replacement</strong> in <strong>kwargs.items()</strong> (recall this is how to iterate over key-value pairs in a dictionary).</span></p><p><span class=\"sentence\"> Replace every instance of <strong>kwarg</strong> with <strong>replacement</strong> in <strong>text</strong>.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Like before, but also unpacking <strong>.items()</strong>:</span></p><pre class=\"language-python\"><code> for kwarg, replacement in kwargs.items():\n   text.replace(kwarg, replacement)</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now remove the bottom comment and see the text of Robin Hood; Being A Complete History Of All The Notable And Merry Exploits Performed By Him And His Men, On Many Occasions. </span><span class=\"sentence\">by William Darton transformed!</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">def remove(filename, *args, **kwargs):\n      with open(filename) as file_obj:\n    text = file_obj.read()\n\n  # Add code here to update text.\n  \n\n  return text\n\n#print(remove(\"text.txt\", \"generous\", \"gallant\", fond=\"amused by\", Robin=\"Mr. Robin\"))\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"passingcontainersasarguments","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"passingcontainersasarguments\" goals=\"next-0\"><h2>Passing Containers as Arguments</h2><p><span class=\"sentence\">Not only can we accept arbitrarily many parameters to a function in our definition, but Python also supports a syntax that makes deconstructing any data that you have on hand to feed into a function that accepts these kinds of unpacked arguments. </span><span class=\"sentence\">The syntax is very similar, but is used when a function is called, not when it’s defined.</span></p><pre class=\"language-python\"><code>def takes_many_args(*args):\n  print(','.join(args))\n\nlong_list_of_args = [145, \"Mexico City\", 10.9, \"85C\"]\n\n# We can use the asterisk \"*\" to deconstruct the container.\n# This makes it so that instead of a list, a series of four different\n# positional arguments are passed to the function\ntakes_many_args(*long_list_of_args)\n# Prints \"145,Mexico City,10.9,85C\"</code></pre><p><span class=\"sentence\">We can use the <strong>*</strong> when calling the function that takes a series of positional parameters to unwrap a list or a tuple. </span><span class=\"sentence\">This makes it easy to provide a sequence of arguments to a function even if that function doesn’t take a list as an argument. </span><span class=\"sentence\">Similarly we can use <strong>**</strong> to destructure a dictionary.</span></p><pre class=\"language-python\"><code>def pour_from_sink(temperature=\"Warm\", flow=\"Medium\")\n  set_temperature(temperature)\n  set_flow(flow)\n  open_sink()\n\n# Our function takes two keyword arguments\n# If we make a dictionary with their parameter names...\nsink_open_kwargs = {\n  'temperature': 'Hot',\n  'flow': \"Slight\",\n}\n\n# We can destructure them an pass to the function\npour_from_sink(**sink_open_kwargs)\n# Equivalent to the following:\n# pour_from_sink(temperature=\"Hot\", flow=\"Slight\")</code></pre><p><span class=\"sentence\">So we can also use dictionaries and pass them into functions as keyword arguments with that syntax. </span><span class=\"sentence\">Notice that our <strong>pour_from_sink()</strong> function doesn’t even accept arbitrary <strong>**kwargs</strong>. </span><span class=\"sentence\">We can use this destructuring syntax even when the function has a specific number of keyword or positional arguments it accepts. </span><span class=\"sentence\">We just need to be careful that the object we’re destructuring matches the length (and names, if a dictionary) of the signature of the function we’re passing it into.</span></p><h4>Instructions</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\">We’ve got a latecomer to the new <strong>create_products</strong> syntax who wants to still pass in a dictionary. </span><span class=\"sentence\">Unpack <strong>new_product_dict</strong> while passing it to <strong>create_products()</strong> as an argument.</span></li></ol> </div><div style=\"width: 320px\"> </div></div> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"review","section":"interactivelesson","goals":[],"html":"<x-step id=\"review\" goals=\"\"><h2>Review</h2><p><span class=\"sentence\">We covered a lot of ground in this lesson! </span><span class=\"sentence\">We learned all about how functions can accept different arguments and different styles by which we can pass those arguments in. </span><span class=\"sentence\">We covered:</span></p><ul> <li><span class=\"sentence\">The default return of a function: </span><span class=\"sentence\"><strong>None</strong></span></li><li><span class=\"sentence\">How to create default arguments to a function</span></li><li><span class=\"sentence\">How to make sure our default arguments work the way we expect when dealing with lists.</span></li><li><span class=\"sentence\">How to pass keyword arguments to a function</span></li><li><span class=\"sentence\">How to unpack multiple returns from a function</span></li><li><span class=\"sentence\">How to unpack multiple positional arguments to a function</span></li><li><span class=\"sentence\">How to unpack multiple keyword arguments to a function</span></li><li><span class=\"sentence\">How to pass a list as a series of arguments to a function</span></li><li><span class=\"sentence\">How to pass a dictionary as a series of keyword arguments to a function This is a lot, and you should be impressed with yourself! </span><span class=\"sentence\">You now should be able to read many different styles of function writing in Python and come up with ways to call those functions with style and clarity.</span></li></ul> <p><span class=\"sentence\">Hopefully this has helped you as a writer of Python functions and enabled you to overcome any problems with input and output of a Python function you might run into. </span><span class=\"sentence\">Congrats!</span></p></x-step>"},{"section":"mutiple_choice_quiz","id":"step-14","goals":["next-0"],"html":"<x-step id=\"step-14\" goals=\"next-0\"><h2>What’s wrong with this function definition?</h2><pre class=\"language-python\"><code>def add_signature_message(signature_message, list_of_paragraphs=[]):\n  list_of_paragraphs.append(signature_message)\n  return list_of_paragraphs</code></pre><ul> <li><span class=\"sentence\">list_of_paragraphs is given a default argument of [], which can lead to errors if it’s called multiple times.</span></li><li><span class=\"sentence\">list_of_paragraphs is returned, but we’re mutating an existing object so we should return None.</span></li><li><span class=\"sentence\">.append() is the wrong list method. </span><span class=\"sentence\">The code should call list_of_paragraphs.extend().</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-15","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-15\" goals=\"next-0\"><h2>What value is saved into the variable returned_value in this block of code?</h2><pre class=\"language-python\"><code>def show_me_the_money(cash_amount):\n  tripled_earnings = cash_amount * 3\n  print(\"We made ${}!\".format(tripled_earnings))\n\nreturned_value = show_me_the_money(300)</code></pre><ul> <li><span class=\"sentence\">print()</span></li><li><span class=\"sentence\">$900</span></li><li><span class=\"sentence\">900</span></li><li><span class=\"sentence\">None</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-16","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-16\" goals=\"next-0\"><h2>What is the output of the following program?</h2><pre class=\"language-python\"><code>def return_translated_point(x, y, change_x, change_y):\n  return x + change_x, y + change_y\n\na, b = return_translated_point(1, 2, 5, 8)\nprint(b)</code></pre><ul> <li><span class=\"sentence\">It prints out 10.</span></li><li><span class=\"sentence\">It prints out 7.</span></li><li><span class=\"sentence\">It prints out (6, 10).</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-17","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-17\" goals=\"next-0\"><h2>How would you pass my_list into the following function?</h2><pre class=\"language-python\"><code>def item_summer(*args):\n  current_sum = 0\n  for arg in args:\n    current_sum += arg\n  return current_sum\n\nmy_list = [5, 19, 23, 88]</code></pre><ul> <li><span class=\"sentence\">item_summer(**my_list)</span></li><li><span class=\"sentence\">item_summer(my_list)</span></li><li><span class=\"sentence\">item_summer(*my_list)</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-18","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-18\" goals=\"next-0\"><h2>What would the result of the following code be?</h2><pre class=\"language-python\"><code>def unite_args(*args):\n  new_string = \"\"\n  for arg in args:\n    new_string += arg\n  return new_string\n\nprint(unite_args(\"I'm \", \"here \", \"for \", \"this \"))</code></pre><ul> <li><span class=\"sentence\">It will print \"I'm here for this\"</span></li><li><span class=\"sentence\">It will print \"this for here I'm \"</span></li><li><span class=\"sentence\">It will raise a TypeError because the function is called with the wrong number of arguments.</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-19","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-19\" goals=\"next-0\"><h2>Give our play_video() function a speed parameter that has a default argument of 1.0.</h2><pre class=\"language-python\"><code>def play_video(url, frame_rate, ____):\n  video_playback_speed = frame_rate * speed\n  frame = get_next_frame(url, video_playback_speed)\n  show_next_frame(frame)</code></pre><ul> <li><span class=\"sentence\">speed: </span><span class=\"sentence\">1.0</span></li><li><span class=\"sentence\">speed=1.0</span></li><li><span class=\"sentence\">speed (default 1.0)</span></li><li><span class=\"sentence\">speed==1.0</span></li><li><span class=\"sentence\">speed@ 1.0</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"id":"step-20","section":"mutiple_choice_quiz","goals":["next-0"],"html":"<x-step id=\"step-20\" goals=\"next-0\"><h2>What is an acceptable way to call the function?</h2><pre class=\"language-python\"><code>def find_string(**kwargs):\n  for keyword, arg in kwargs.items():\n    print(arg.find(keyword))\n\nfind_string(____)</code></pre><ul> <li><span class=\"sentence\">\"waldo\"</span></li><li><span class=\"sentence\">kwargs={\"waldo\": </span><span class=\"sentence\">\"here's waldo\"}</span></li><li><span class=\"sentence\">waldo=\"long sentence with waldo in it\"</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\"> Continue</button> </span></p></x-step>"},{"section":"freedomproject","id":"thenile","goals":[],"html":"<x-step id=\"thenile\" goals=\"\"><h2>The Nile</h2><p><span class=\"sentence\"><strong>The Nile</strong> fullfilment agency brings everything you could possibly want straight to your door! </span><span class=\"sentence\">Use your knowledge of Python functions and how to manipulate arguments to help automate practices for the biggest world-changing company.</span></p><h4>Not Just A River In Egypt</h4><div class=\"row padded\"><div class=\"grow\"> <ol> <li><span class=\"sentence\"><p><span class=\"sentence\">At The Nile our biggest concern is our consumers, and our biggest cost is delivering their goods to them. </span><span class=\"sentence\">We want to develop a program that will help us minimize these costs so we can continue making everyone happy.</span></p><p><span class=\"sentence\"> First we’ll need to calculate these costs using a function that you’re going to write called calculate_shipping_cost().</span></p><p><span class=\"sentence\"> Give calculate_shipping_cost three parameters: </span><span class=\"sentence\">from_coords, to_coords, and shipping_type.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Create a function using the def keyword and give it the three given parameters.</span></p></span></li></ol> <ol start=\"2\"> <li><span class=\"sentence\"><p><span class=\"sentence\">Both from_coords and to_coords are tuples, containing first the latitude and then the longitude. </span><span class=\"sentence\">Since our get_distance() function looks for all four as separate arguments, we’ll need to separate these variables out.</span></p><p><span class=\"sentence\"> Inside calculate_shipping_cost unpack those tuples into from_lat, from_long, to_lat, and to_long.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Unpack the tuple arguments in the function using variable unpacking:</span></p><pre class=\"language-python\"><code> # if you have two tuples in variables\n first_coord  = (0, 1)\n second_coord = (2, 3)\n\n # you can unpack them with commas\n first_x, first_y   = first_coord\n second_x, second_y = second_coord</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now call get_distance(from_lat, from_long, to_lat, to_long) and save the result as distance.</span></p><p><span class=\"sentence\"> There’s other ways to separate those two coordinates when calling this function, how would you have done it?</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> One way is to use the * spread operator, which would unpack those coordinates in the function call.</span></p><pre class=\"language-python\"><code> distance = get_distance(*from_coords, *to_coords)</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Next, get the shipping_rate by using the provided SHIPPING_PRICES dictionary and fetching the key passed in as shipping_type.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> You can use the [] to retrieve the key from SHIPPING_PRICES:</span></p><pre class=\"language-python\"><code> SHIPPING_PRICES[shipping_type]</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Calculate the price by multiplying the distance by the shipping_rate.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Finally, return the formatted price, created by calling the provided format_price() on the price itself.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Make sure to return the results of format_price()!</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">What about our shoppers who hastily purchase goods without indicating their shipping type? </span><span class=\"sentence\">Let’s give our function a default argument for shipping_type. </span><span class=\"sentence\">Since they’re in such a hurry let’s make the default argument 'Overnight'. </span><span class=\"sentence\">They’ll be happier to get what they ordered earlier, and we’ll be happier because they paid more money for it. </span><span class=\"sentence\">It’s a win-win!</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Want to make sure you wrote the function correctly? </span><span class=\"sentence\">Try calling test_function(calculate_shipping_cost) after your function definition.</span></p></span></li></ol> <h4>Careers At The Nile</h4><ol start=\"9\"> <li><span class=\"sentence\"><p><span class=\"sentence\">At The Nile, we have a joke. </span><span class=\"sentence\">Without our fantastic drivers, who fulfill orders every day, we’d just be sitting with millions of toys, electronics, and clothing in warehouses to ourselves.</span></p><p><span class=\"sentence\"> Our team is important, and we want to make sure the hardest workers find their home in our careers. </span><span class=\"sentence\">In order to do that, we need to figure out who the best person is for each job.</span></p><p><span class=\"sentence\"> Write a function called calculate_driver_cost() with distance as the first parmameter, and as many drivers as are available as positional arguments after that, as drivers.</span></p><p><span class=\"sentence\"> Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\"> Hint</span></p><p><span class=\"sentence\"> Remember to define this function to take an arbitrary number of positional variables, the function definition will look like this:</span></p><pre class=\"language-python\"><code> def calculate_driver_cost(variable1, *list_of_variables):\n   pass</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">In order to find the best person, we need to calculate how much it would cost for any of the drivers to fulfill this order.</span></p><p><span class=\"sentence\">Create two new variables, cheapest_driver and cheapest_driver_price. </span><span class=\"sentence\">Set them both to None.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now let’s iterate over every driver in drivers. </span><span class=\"sentence\">Use a for loop.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\">Hint</span></p><p><span class=\"sentence\">Remember a for loop over fun_list would look like:</span></p><pre class=\"language-python\"><code>for fun_item in fun_list:\n  pass</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">First calculate the driver_time for each driver by multiplying driver.speed by distance.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Next calculate the price_for_driver by multiplying driver.salary by driver_time.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Now we want to check if the current driver is the cheapest driver we’ve looked at.</span></p><p><span class=\"sentence\">First, we’ll check if cheapest_driver is None, this likely means this is the first driver we’ve looked at.</span></p><p><span class=\"sentence\">In that case, set cheapest_driver equal to driver and then set cheapest_driver_price equal to price_for_driver.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">In an elif statment, check if price_for_driver is less than cheapest_driver_price. </span><span class=\"sentence\">This means that our current driver is cheaper than the driver stored in cheapest_driver.</span></p><p><span class=\"sentence\">Update cheapest_driver to be equal to driver and update cheapest_driver_price to be equal to price_for_driver.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">After outdenting out of our elif statement and the for loop, return cheapest_driver_price and cheapest_driver.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\">Hint</span></p><p><span class=\"sentence\">Return them both by separating with a comma.</span></p><pre class=\"language-python\"><code>def cool_function():\n  return 10, \"cool\"</code></pre></span></li></ol> <h4>The Nile Exclusive</h4><ol start=\"17\"> <li><span class=\"sentence\"><p><span class=\"sentence\">Great first day, friend! </span><span class=\"sentence\">Let’s try and figure out all the money you’ve saved us today.</span></p><p><span class=\"sentence\">Let’s define a function called calculate_money_made().</span></p><p><span class=\"sentence\">This function will be passed a number of Trip IDs with corresponding trip information as arguments, so let’s just take any keyword arguments passed into it. </span><span class=\"sentence\">Store them all as trips!</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\">Hint</span></p><pre class=\"language-python\"><code>Define calculate_money_made() with trips as an arbitrary keyword argument.\n\ndef calculate_money_made(**trips):\n  pass</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Let’s start a counter at 0. </span><span class=\"sentence\">Create a variable called total_money_made that will count up for us.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Iterate through every trip_id and trip in the trips dictionary.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\">Hint</span></p><p><span class=\"sentence\">Use .items() to iterate over pairs in a dictionary:</span></p><pre class=\"language-python\"><code>for trip_id, trip in trips.items():\n  pass</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Calculate the trip revenue into the variable trip_revenue by calculating trip.cost minus trip.driver.cost.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Add up that sweet revenue by incrementing total_money_made by trip_revenue.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint</span></p><p><span class=\"sentence\">Hint</span></p><p><span class=\"sentence\">You can use += to do this:</span></p><pre class=\"language-python\"><code>total_money_made += trip_revenue</code></pre></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Outside your for loop, return the total!</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">Congratulations! </span><span class=\"sentence\">You’ve been a real life-saver around these parts. </span><span class=\"sentence\">We broke up functions using arbitrary and default parameters! </span><span class=\"sentence\">Remember you can test your function by calling test_function(calculate_money_made) afterwards!</span></p></span></li></ol> </div><div style=\"width: 320px\"> <div id=\"ide\"><pre class=\"initcode\">from nile import get_distance, format_price, SHIPPING_PRICES\nfrom test import test_function\n\n# Define calculate_shipping_cost() here:\n\n\n# Test the function by calling \n# test_function(calculate_shipping_cost)\n\n# Define calculate_driver_cost() here\n\n\n# Test the function by calling \n# test_function(calculate_driver_cost)\n\n# Define calculate_money_made() here\n\n\n# Test the function by calling \n# test_function(calculate_money_made)\n</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> </x-step>"},{"id":"step-22","section":"video","goals":[],"html":"<x-step id=\"step-22\" goals=\"\"></x-step>"}],"goals":20,"title":"Function Arguments"}