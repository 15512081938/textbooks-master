{"sections":[{"id":"interactivelesson","title":"interactive lesson","status":"","background":"","goals":12,"duration":60,"steps":["step-0","readingafile","iteratingthroughlines","readingaline","writingaline","appendingtoafile","whatiswithwith","whatisacsvfile","readingacsvfile","readingdifferenttypesofcsvfiles","writingacsvfile","readingajsonfile","writingajsonfile","review"]},{"id":"multiplechoicequiz","title":"Multiple Choice Quiz","status":"","background":"","goals":6,"duration":10,"steps":["step-14","step-15","step-16","step-17","step-18","step-19","step-20","step-21"]},{"id":"freeformproject","title":"Freeform Project","status":"","background":"","goals":0,"duration":15,"steps":["step-22","freeformproject"]}],"steps":[{"stage":"Files","description":"LEARN PYTHON: FILES","section":"interactivelesson","id":"step-0","goals":[],"html":"<x-step id=\"step-0\" goals=\"\"></x-step>"},{"id":"readingafile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingafile\" goals=\"next-0\"><h2>Reading a File</h2><p><span class=\"sentence\">Computers use file systems to store and retrieve data. </span><span class=\"sentence\">Each file is an individual container of related information. </span><span class=\"sentence\">If you’ve ever saved a document, downloaded a song, or even sent an email you’ve created a file on some computer somewhere. </span><span class=\"sentence\">Even <strong>script.py</strong>, the Python program you’re editing in the learning environment, is a file.</span></p><p><span class=\"sentence\">So, how do we interact with files using Python? </span><span class=\"sentence\">We’re going to learn how to read and write different kinds of files using code. </span><span class=\"sentence\">Let’s say we had a file called <strong>real_cool_document.txt</strong> with these contents:</span></p><p><span class=\"sentence\"><strong>real_cool_document.txt</strong></span></p><pre class=\"language-python\"><code>Wowsers!</code></pre><p><span class=\"sentence\">We could read that file like this: </span><span class=\"sentence\">reading_a_file.py</span></p><pre class=\"language-python\"><code>with open('real_cool_document.txt') as cool_doc:\n  cool_contents = cool_doc.read()\nprint(cool_contents)</code></pre><p><span class=\"sentence\">This opens a file object called <span class=\"nowrap\"><code>cool_doc</code>.</span> </span><span class=\"sentence\">and creates a new indented block where you can read the contents of the opened file. </span><span class=\"sentence\">We then read the contents of the file <span class=\"nowrap\"><code>cool_doc</code>.</span> </span><span class=\"sentence\">using <span class=\"nowrap\"><code>cool_doc.read()</code>.</span> </span><span class=\"sentence\">and save the resulting string into the variable <span class=\"nowrap\"><code> cool_contents</code>.</span> </span><span class=\"sentence\">Then we print <span class=\"nowrap\"><code>cool_contents</code>,</span> which outputs the statement <span class=\"nowrap\"><code>Wowsers</code>!</span></span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Use <code>with</code> to open the file <strong>welcome.txt</strong>. </span><span class=\"sentence\">Save the file object as <span class=\"nowrap\"><code>text_file</code>.</span></span></p><p><span class=\"sentence\"><button class=\"btn btn-yellow\">Stuck? Get a hint</button></span></p><pre class=\"language-python\"><code>Use this syntax to open a file:\nwith open('filename.txt') as file_object:\n# indented block here</code></pre><p><span class=\"sentence\"><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Read the contents of <span class=\"nowrap\"><code>text_file</code>.</span> </span><span class=\"sentence\">and save the results in <span class=\"nowrap\"><code>text_data</code>.</span></span></p><p><span class=\"sentence\">Use this syntax on a file object to read the contents of the file into a variable:</span></p><pre class=\"language-python\"><code>file_string = file_object.read()</code></pre><p><span class=\"sentence\"><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Print out <span class=\"nowrap\"><code>text_data</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('welcome.txt') as text_file:\n  text_data = text_file.read()\n  print(text_data)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingafile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"iteratingthroughlines","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"iteratingthroughlines\" goals=\"next-0\"><h2>Iterating Through Lines</h2><p><span class=\"sentence\">When we read a file, we might want to grab the whole document in a single string, like <code>.read()</code> would return. </span><span class=\"sentence\">But what if we wanted to store each line in a variable? </span><span class=\"sentence\">We can use the <code>.readlines()</code> function to read a text file line by line instead of having the whole thing. </span><span class=\"sentence\">Suppose we have a file:</span></p><p><span class=\"sentence\"><strong>keats_sonnet.txt</strong></span></p><pre class=\"language-python\"><code>To one who has been long in city pent,\n’Tis very sweet to look into the fair\nAnd open face of heaven,—to breathe a prayer\nFull in the smile of the blue firmament.</code></pre><p><span class=\"sentence\"><strong>iterating_through_lines.py</strong></span></p><pre class=\"language-python\"><code>with open('keats_sonnet.txt') as keats_sonnet:\n  for line in keats_sonnet.readlines():\n    print(line)</code></pre><p><span class=\"sentence\">The above script creates a temporary file object called <code>keats_sonnet</code> that points to the file <strong>keats_sonnet.txt</strong>. </span><span class=\"sentence\">It then iterates over each line in the document and prints the entire file out.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"iteratingthroughlines\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Using a <code>with</code> statement, create a file object pointing to the file <strong>how_many_lines.txt</strong>. </span><span class=\"sentence\">Store that file object in the variable <span class=\"nowrap\"><code>lines_doc</code>.</span></span></p><p><span class=\"sentence\">Remember to open a file using <code>with</code> syntax:</span></p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # indented block here</code></pre><p><span class=\"sentence\"><input id=\"iteratingthroughlines\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Iterate through each of the lines in <code>lines_doc.readlines()</code> using a <code>for</code> loop.</span></p><p><span class=\"sentence\">Inside the for loop print out each line of <strong>how_many_lines.txt</strong>.</span></p><p><span class=\"sentence\">You can use the following syntax to print out each line of a file:</span></p><pre class=\"language-python\"><code>for line in file_object.readlines():\n  print(line)</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('how_many_lines.txt') as lines_doc:\n  for line in lines_doc.readlines():\n    print(line)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=iteratingthroughlines\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"readingaline","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingaline\" goals=\"next-0\"><h2>Reading a Line</h2><p><span class=\"sentence\">Sometimes you don’t want to iterate through a whole file. </span><span class=\"sentence\">For that, there’s a different file method, <span class=\"nowrap\"><code>.readline()</code>,</span> which will only read a single line at a time. </span><span class=\"sentence\">If the entire document is read line by line in this way subsequent calls to <code>.readline()</code> will not throw an error but will start returning an empty string (<code>\"\"</code>). </span><span class=\"sentence\">Suppose we had this file:</span></p><p><span class=\"sentence\"><strong>millay_sonnet.txt</strong></span></p><pre class=\"language-python\"><code>I shall forget you presently, my dear,\nSo make the most of this, your little day,\nYour little month, your little half a year,\nEre I forget, or die, or move away,</code></pre><p><span class=\"sentence\"><strong>reading_a_line.py</strong></span></p><pre class=\"language-python\"><code>with open('millay_sonnet.txt') as sonnet_doc:\n  first_line = sonnet_doc.readline()\n  second_line = sonnet_doc.readline()\n  print(second_line)</code></pre><p><span class=\"sentence\">This script also creates a file object called <code>sonnet_doc</code> that points to the file <strong>millay_sonnet.txt</strong>. </span><span class=\"sentence\">It then reads in the first line using <code>sonnet_doc.readline()</code> and saves that to the variable <span class=\"nowrap\"><code>first_line</code>.</span> </span><span class=\"sentence\">It then saves the second line (<code>So make the most of this, your little day,</code>) into the variable <code>second_line</code> and then prints it out.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"readingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>Using a <code>with</code> statement, create a file object pointing to the file <strong>just_the_first.txt</strong>. </span><span class=\"sentence\">Store that file object in the variable <span class=\"nowrap\"><code>first_line_doc</code>.</span></span></p><p><span class=\"sentence\">Remember to open a file using <code>with</code> syntax:</span></p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # indented block here</code></pre><p><span class=\"sentence\"><input id=\"readingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>Save the first line of <strong>just_the_first.txt</strong> into the variable <span class=\"nowrap\"><code>first_line</code>.</span></span></p><p><span class=\"sentence\">Use the file object method <code>.readline()</code> to store a line into the variable <span class=\"nowrap\"><code>line</code>.</span></span></p><p><span class=\"sentence\"><input id=\"readingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>Print out the variable <span class=\"nowrap\"><code>first_line</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('just_the_first.txt') as first_line_doc:\n  first_line = first_line_doc.readline()\n  print(first_line)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingaline\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"writingaline","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingaline\" goals=\"next-0\"><h2>Writing a File</h2><p><span class=\"sentence\">Reading a file is all well and good, but what if we want to create a file of our own? </span><span class=\"sentence\">With Python we can do just that. </span><span class=\"sentence\">It turns out that our <code>open()</code> function that we’re using to open a file to read needs another argument to open a file to write to.</span></p><p><span class=\"sentence\"><strong>writing_a_line.py</strong></span></p><pre class=\"language-python\"><code>with open('generated_file.txt', 'w') as gen_file:\n  gen_file.write(\"What an incredible file!\")</code></pre><p><span class=\"sentence\">Here we pass the argument <code>'w'</code> to <code>open()</code> in order to indicate to open the file in write-mode. </span><span class=\"sentence\">The default argument is <code>'r'</code> and passing <code>'r'</code> to <code>open()</code> opens the file in read-mode as we’ve been doing.</span></p><p><span class=\"sentence\">This code creates a new file in the same folder as <em>script.py</em> and gives it the text <span class=\"nowrap\"><code>What an incredible file!</code>.</span> </span><span class=\"sentence\">It’s important to note that if there is already a file called <em>generated_file.txt</em> it will completely overwrite that file, erasing whatever its contents were before.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"writingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Create a file object for the file <strong>bad_bands.txt</strong> using the <code>open()</code> function with the <code>w</code> argument. </span><span class=\"sentence\">Assign this object to the temporary variable <span class=\"nowrap\"><code>bad_bands_doc</code>.</span></span></p><p><span class=\"sentence\">Remember to use the <code>with</code> statement to open a file and pass the <code>'w'</code> argument to open it in write mode:</span></p><pre class=\"language-python\"><code>with open('file_to_write.txt', 'w') as file_object:\n  # indent</code></pre><p><span class=\"sentence\"><input id=\"writingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Use the <code>bad_bands_doc.write()</code> method to add the name of a musical group you dislike to the document <span class=\"nowrap\"><code>bad_bands</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('bad_bands.txt', 'w') as bad_bands_doc:\n\n  bad_bands_doc.write('The Beatles')\n  # Weren't expecting THAT were you??</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingaline\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"appendingtoafile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"appendingtoafile\" goals=\"next-0\"><h2>Appending to a File</h2><p><span class=\"sentence\">So maybe completely deleting and overwriting existing files is something that bothers you. </span><span class=\"sentence\">Isn’t there a way to just add a line to a file without completely deleting it? </span><span class=\"sentence\">Of course there is! </span><span class=\"sentence\">Instead of opening the file using the argument <code>'w'</code> for write-mode, we open it with <code>'a'</code> for append-mode. </span><span class=\"sentence\">If we have a generated file with the following contents:</span></p><p><span class=\"sentence\"><strong>generated_file.txt</strong></span></p><pre class=\"language-python\"><code>This was a popular file...</code></pre><p><span class=\"sentence\">Then we can add another line to that file with the following code:</span></p><p><span class=\"sentence\"><strong>appending_to_a_file.py</strong></span></p><pre class=\"language-python\"><code>with open('generated_file.txt', 'a') as gen_file:\n  gen_file.write(\"... and it still is\")</code></pre><p><span class=\"sentence\">In the code above we open a file object in the temporary variable <span class=\"nowrap\"><code>gen_file</code>.</span> </span><span class=\"sentence\">This variable points to the file <strong>generated_file.txt</strong> and, since it’s open in append-mode, adds the line <code>... and it still is</code> as a new line to the file. </span><span class=\"sentence\">If you were to open the file after running the script it would look like this:</span></p><p><span class=\"sentence\"><strong>generated_file.txt</strong></span></p><pre class=\"language-python\"><code>This was a popular file...\n... and it still is</code></pre><p><span class=\"sentence\">Notice that opening the file in append-mode, with <code>'a'</code> as an argument to <span class=\"nowrap\"><code>open()</code>,</span> means that using the file object’s <code>.write()</code> method <em>appends</em> whatever is passed to the end of the file in a new line. </span><span class=\"sentence\">If we were to run <strong>script.py</strong> again, this would be what <strong>generated_file.txt</strong> looks like:</span></p><p><span class=\"sentence\"><strong>generated_file.txt</strong></span></p><pre class=\"language-python\"><code>This was a popular file...\n... and it still is\n... and it still is</code></pre><p><span class=\"sentence\">Notice that we’ve appended <code>\"... and it still is\"</code> to the file a second time! </span><span class=\"sentence\">This is because in <strong>script.py</strong> we opened <strong>generated_file.txt</strong> in append-mode.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"appendingtoafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>We’ve got a file, <strong>cool_dogs.txt</strong>, filled with all the cool dogs we know. </span><span class=\"sentence\">Somehow while compiling this list we forgot about one very cool dog. </span><span class=\"sentence\">Let’s fix that problem by adding him to our <strong>cool_dogs.txt</strong>.</span></p><p><span class=\"sentence\">Open up our file <strong>cool_dogs.txt</strong> in append-mode and assign it to the file object <span class=\"nowrap\"><code>cool_dogs_file</code>.</span></span></p><p><span class=\"sentence\"><input id=\"appendingtoafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>Inside your <code>with</code> block, add “Air Buddy” to <strong>cool_dogs.txt</strong>. </span><span class=\"sentence\">Air Buddy is a Golden Retriever that plays basketball, which more than qualifies him for this list.</span></p><p><span class=\"sentence\">Use <code>cool_dogs_file.write()</code> to add a string to the end of <strong>cool_dogs.txt</strong></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('cool_dogs.txt', 'a') as cool_dogs_file:\n  cool_dogs_file.write('Air Buddy')</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=appendingtoafile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"whatiswithwith","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"whatiswithwith\" goals=\"next-0\"><h2>What's With \"with\"?</h2><p><span class=\"sentence\">We’ve been opening these files with this <code>with</code> block so far, but it seems a little weird that we can only use our file variable in the indented block. </span><span class=\"sentence\">Why is that? </span><span class=\"sentence\">The <code>with</code> keyword invokes something called a <em>context manager</em> for the file that we’re calling <code>open()</code> on. </span><span class=\"sentence\">This context manager takes care of opening the file when we call <code>open()</code> and then closing the file after we leave the indented block.</span></p><p><span class=\"sentence\">Why is closing the file so complicated? </span><span class=\"sentence\">Well, most other aspects of our code deal with things that Python itself controls. </span><span class=\"sentence\">All the variables you create: </span><span class=\"sentence\">integers, lists, dictionaries — these are all Python objects, and Python knows how to clean them up when it’s done with them. </span><span class=\"sentence\">Since your files exist <em>outside</em> your Python script, we need to tell Python when we’re done with them so that it can close the connection to that file. </span><span class=\"sentence\">Leaving a file connection open unnecessarily can affect performance or impact other programs on your computer that might be trying to access that file.</span></p><p><span class=\"sentence\">The <code>with</code> syntax replaces older ways to access files where you need to call <code>.close()</code> on the file object manually. </span><span class=\"sentence\">We can still open up a file and append to it with the old syntax, as long as we remember to close the file connection afterwards.</span></p><pre class=\"language-python\"><code>fun_cities_file = open('fun_cities.txt', 'a')\n\n# We can now append a line to \"fun_cities\".\nfun_cities_file.write(\"Montréal\")\n\n# But we need to remember to close the file\nfun_cities_file.close()</code></pre><p><span class=\"sentence\">In the above script we added “Montréal” as a new line in our file <strong>fun_cities.txt</strong>. </span><span class=\"sentence\">However, since we used the older-style syntax, we had to remember to close the file afterwards. </span><span class=\"sentence\">Since this is necessarily more verbose (requires at least one more line of code) without being any more expressive, using <code>with</code> is preferred.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"whatiswithwith\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>In <strong>what_is_with_with.py</strong> there’s a file object that doesn’t get closed correctly. </span><span class=\"sentence\">Let’s fix it by changing the syntax!</span></p><p><span class=\"sentence\">Remove this line:</span></p><pre class=\"language-python\"><code>close_this_file = open('fun_file.txt')</code></pre><p><span class=\"sentence\">And change it to use the <code>with</code> syntax from our previous exercises.</span></p><p><span class=\"sentence\">Remember to indent the rest of the body so that we don’t get an <span class=\"nowrap\"><code>IndentError</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('fun_file.txt') as close_this_file:\n\n  setup = close_this_file.readline()\n  punchline = close_this_file.readline()\n\n  print(setup)\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=whatiswithwith\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"whatisacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"whatisacsvfile\" goals=\"next-0\"><h2>What Is a CSV File?</h2><p><span class=\"sentence\">Text files aren’t the only thing that Python can read, but they’re the only thing that we don’t need any additional parsing library to understand. </span><span class=\"sentence\">CSV files are an example of a text file that impose a structure to their data. </span><span class=\"sentence\">CSV stands for <strong>Comma-Separated Values*</strong> and CSV files are usually the way that data from spreadsheet software (like Microsoft Excel or Google Sheets) is exported into a portable format. </span><span class=\"sentence\">A spreadsheet that looks like the following</span></p><table> <thead> <tr> <th>Name</th><th>Username</th><th>Email</th></tr> </thead> <tbody><tr> <td>Roger Smith</td><td>rsmith</td><td><a href=\"mailto:wigginsryan@yahoo.com\" target=\"_blank\">wigginsryan@yahoo.com</a></td></tr> <tr> <td>Michelle Beck</td><td>mlbeck</td><td><a href=\"mailto:hcosta@hotmail.com\" target=\"_blank\">hcosta@hotmail.com</a></td></tr> <tr> <td>Ashley Barker</td><td>a_bark_x</td><td><a href=\"mailto:a_bark_x@turner.com\" target=\"_blank\">a_bark_x@turner.com</a></td></tr> <tr> <td>Lynn Gonzales</td><td>goodmanjames</td><td><a href=\"mailto:lynniegonz@hotmail.com\" target=\"_blank\">lynniegonz@hotmail.com</a></td></tr> <tr> <td>Jennifer Chase</td><td>chasej</td><td><a href=\"mailto:jchase@ramirez.com\" target=\"_blank\">jchase@ramirez.com</a></td></tr> <tr> <td>Charles Hoover</td><td>choover</td><td><a href=\"mailto:choover89@yahoo.com\" target=\"_blank\">choover89@yahoo.com</a></td></tr> <tr> <td>Adrian Evans</td><td>adevans</td><td><a href=\"mailto:adevans98@yahoo.com\" target=\"_blank\">adevans98@yahoo.com</a></td></tr> <tr> <td>Susan Walter</td><td>susan82</td><td><a href=\"mailto:swilliams@yahoo.com\" target=\"_blank\">swilliams@yahoo.com</a></td></tr> <tr> <td>Stephanie King</td><td>stephanieking</td><td><a href=\"mailto:sking@morris-tyler.com\" target=\"_blank\">sking@morris-tyler.com</a></td></tr> <tr> <td>Erika Miller</td><td>jessica32</td><td><a href=\"mailto:ejmiller79@yahoo.com\" target=\"_blank\">ejmiller79@yahoo.com</a></td></tr> <tr> <td></td><td></td><td></td></tr> </tbody></table> <p><span class=\"sentence\">In a CSV file that same exact data would be rendered like this:</span></p><p><span class=\"sentence\"><strong>users.csv</strong></span></p><pre class=\"language-python\"><code>Name,Username,Email\nRoger Smith,rsmith,wigginsryan@yahoo.com\nMichelle Beck,mlbeck,hcosta@hotmail.com\nAshley Barker,a_bark_x,a_bark_x@turner.com\nLynn Gonzales,goodmanjames,lynniegonz@hotmail.com\nJennifer Chase,chasej,jchase@ramirez.com\nCharles Hoover,choover,choover89@yahoo.com\nAdrian Evans,adevans,adevans98@yahoo.com\nSusan Walter,susan82,swilliams@yahoo.com\nStephanie King,stephanieking,sking@morris-tyler.com\nErika Miller,jessica32,ejmiller79@yahoo.com</code></pre><p><span class=\"sentence\">Notice that the first row of the CSV file doesn’t actually represent any data, just the labels of the data that’s present in the rest of the file. </span><span class=\"sentence\">The rest of the rows of the file are the same as the rows in the spreadsheet software, just instead of being separated into different cells they’re separated by… well I suppose it’s fair to say they’re separated by commas.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"whatisacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">CSV files are just plain text files!</span></p><p><span class=\"sentence\">Open <code>logger.csv</code> using our standard <code>with</code> syntax, saving the file object in the temporary variable <span class=\"nowrap\"><code>log_csv_file</code>.</span></span></p><p><span class=\"sentence\"><input id=\"whatisacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Print out the contents of <code>logger.csv</code> by calling <code>.read()</code> on the file. </span><span class=\"sentence\">Notice that it is parsed as a string.</span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('logger.csv') as log_csv_file:\n  print(log_csv_file.read())</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=whatisacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"readingacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingacsvfile\" goals=\"next-0\"><h2>Reading a CSV File</h2><p><span class=\"sentence\">Recall our CSV file from our last exercise:</span></p><p><span class=\"sentence\"><strong>users.csv</strong></span></p><pre class=\"language-python\"><code>Name,Username,Email\nRoger Smith,rsmith,wigginsryan@yahoo.com\nMichelle Beck,mlbeck,hcosta@hotmail.com\nAshley Barker,a_bark_x,a_bark_x@turner.com\nLynn Gonzales,goodmanjames,lynniegonz@hotmail.com</code></pre><p><span class=\"sentence\">Even though we can read these lines as text without a problem, there are ways to access the data in a format better suited for programming purposes. </span><span class=\"sentence\">In Python we can convert that data into a dictionary using the <code>csv</code> library’s <code>DictReader</code> object. </span><span class=\"sentence\">Here’s how we’d create a list of the email addresses of all of the users in the above table:</span></p><pre class=\"language-python\"><code>import csv\n\nlist_of_email_addresses = []\nwith open('users.csv', newline='') as users_csv:\n  user_reader = csv.DictReader(users_csv)\n  for row in user_reader:\n    list_of_email_addresses.append(row['Email'])</code></pre><p><span class=\"sentence\">In the above code we first import our <code>csv</code> library, which gives us the tools to parse our CSV file. </span><span class=\"sentence\">We then create the empty list <code>list_of_email_addresses</code> which we’ll later populate with the email addresses from our CSV. </span><span class=\"sentence\">Then we open the <strong>users.csv</strong> file with the temporary variable <span class=\"nowrap\"><code>users_csv</code>.</span></span></p><p><span class=\"sentence\">We pass the additional keyword argument <code>newline=''</code> to the file opening <code>open()</code> function so that we don’t accidentally mistake a line break in one of our data fields as a new row in our CSV (read more about this in <a href=\"https://docs.python.org/3/library/csv.html#id3\" target=\"_blank\">the Python documentation</a>).</span></p><p><span class=\"sentence\">After opening our new CSV file we use <code>csv.DictReader(users_csv)</code> which converts the lines of our CSV file to Python dictionaries which we can use access methods for. </span><span class=\"sentence\">The keys of the dictionary are, by default, the entries in the first line of our CSV file. </span><span class=\"sentence\">Since our CSV’s first line calls the third field in our CSV <code>\"Email\"</code> , we can use that as the key in each row of our DictReader.</span></p><p><span class=\"sentence\">When we iterate through the rows of our <code>user_reader</code> object, we access all of the rows in our CSV as dictionaries (except for the first row, which we used to label the keys of our dictionary). </span><span class=\"sentence\">By accessing the <code>'Email'</code> key of each of these rows we can grab the email address in that row and append it to our <span class=\"nowrap\"><code>list_of_email_addresses</code>.</span></span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Import the <code>csv</code> module.</span></p><p><span class=\"sentence\"><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Open up the file <strong>cool_csv.csv</strong> in the temporary variable <span class=\"nowrap\"><code>cool_csv_file</code>.</span></span></p><p><span class=\"sentence\"><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Using <code>csv.DictReader</code> read the contents of <code>cool_csv_file</code> into a new variable called <span class=\"nowrap\"><code>cool_csv_dict</code>.</span></span></p><p><span class=\"sentence\">Create a <code>DictReader</code> using it’s constructor with the following syntax:</span></p><pre class=\"language-python\"><code>file_dict = csv.DictReader(file_object)</code></pre><p><span class=\"sentence\"><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> </span><span class=\"sentence\"> <strong>cool_csv.csv</strong> includes a cool fact about every person in the CSV.</span></p><p><span class=\"sentence\">For each row in <code>cool_csv_dict</code> print out that row’s <span class=\"nowrap\"><code>\"Cool Fact\"</code>.</span></span></p><p><span class=\"sentence\">You can use <code>for...in</code> syntax to loop through a <code>DictReader</code> object. </span><span class=\"sentence\">Each of these objects will be a dictionary, with the first row of the file indicating the keys.</span></p><pre class=\"language-python\"><code>for row in csv_file_dict:\n  print(row['Key'])</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import csv\n\nwith open('cool_csv.csv') as cool_csv_file:\n  cool_csv_dict = csv.DictReader(cool_csv_file)\n  for row in cool_csv_dict:\n    print(row['Cool Fact'])</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"readingdifferenttypesofcsvfiles","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingdifferenttypesofcsvfiles\" goals=\"next-0\"><h2>Reading Different Types of CSV Files</h2><p><span class=\"sentence\">I need to level with you, I’ve been lying to you for the past two exercises. </span><span class=\"sentence\">Well, kind of. </span><span class=\"sentence\">We’ve been acting like CSV files are Comma-Separated Values files. </span><span class=\"sentence\">It’s true that CSV stands for that, but it’s also true that other ways of separating values are valid CSV files these days.</span></p><p><span class=\"sentence\">People used to call Tab-Separated Values files TSV files, but as other separators grew in popularity everyone realized that creating a new <code>.[a-z]sv</code> file format for every value-separating character used is not sustainable.</span></p><p><span class=\"sentence\">So we call all files with a list of different values a CSV file and then use different <em>delimiters</em> (like a comma or tab) to indicate where the different values start and stop.</span></p><p><span class=\"sentence\">Let’s say we had an address book. </span><span class=\"sentence\">Since addresses usually use commas in them, we’ll need to use a different delimiter for our information. </span><span class=\"sentence\">Since none of our data has semicolons (<code>;</code>) in them, we can use those.</span></p><p><span class=\"sentence\"><strong>addresses.csv</strong></span></p><pre class=\"language-python\"><code>Name;Address;Telephone\nDonna Smith;126 Orr Corner Suite 857\\nEast Michael, LA 54411;\n906-918-6560\nAaron Osborn;6965 Miller Station Suite 485\\nNorth Michelle, KS 64364;\n815.039.3661x42816\nJennifer Barnett;8749 Alicia Vista Apt. 288\\nLake Victoriaberg, TN 51094;\n397-796-4842x451\nJoshua Bryan;20116 Stephanie Stravenue\\nWhitneytown, IA 87358;\n(380)074-6173\nAndrea Jones;558 Melissa Keys Apt. 588\\nNorth Teresahaven, WA 63411;\n+57(8)7795396386\nVictor Williams;725 Gloria Views Suite 628\\nEast Scott, IN 38095;\n768.708.3411x954</code></pre><p><span class=\"sentence\">Notice the <code>\\n</code> character, this is the escape sequence for a new line. </span><span class=\"sentence\">The possibility of a new line escaped by a <code>\\n</code> character in our data is why we pass the <code>newline=''</code> keyword argument to the <code>open()</code> function.</span></p><p><span class=\"sentence\">Also notice that many of these addresses have commas in them! </span><span class=\"sentence\">This is okay, we’ll still be able to read it. </span><span class=\"sentence\">If we wanted to, say, print out all the addresses in this CSV file we could do the following:</span></p><pre class=\"language-python\"><code>import csv\n\nwith open('addresses.csv', newline='') as addresses_csv:\n  address_reader = csv.DictReader(addresses_csv, delimiter=';')\n  for row in address_reader:\n    print(row['Address'])</code></pre><p><span class=\"sentence\">Notice that when we call <code>csv.DictReader</code> we pass in the <code>delimiter</code> parameter, which is the string that’s used to delineate separate fields in the CSV. </span><span class=\"sentence\">We then iterate through the CSV and print out each of the addresses.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Import the <code>csv</code> module.</span></p><p><span class=\"sentence\"><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Open up the file <strong>books.csv</strong> in the variable <span class=\"nowrap\"><code>books_csv</code>.</span></span></p><p><span class=\"sentence\"><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Create a <code>DictReader</code> instance that uses the <code>@</code> symbol as a delimiter to read <span class=\"nowrap\"><code>books_csv</code>.</span> </span><span class=\"sentence\">Save the result in a variable called <span class=\"nowrap\"><code>books_reader</code>.</span></span></p><p><span class=\"sentence\"><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> </span><span class=\"sentence\"> Create a list called <span class=\"nowrap\"><code>isbn_list</code>,</span> iterate through <code>books_reader</code> to get the ISBN number of every book in the CSV file. </span><span class=\"sentence\">Use the <code>['ISBN']</code> key for the dictionary objects passed to it.</span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import csv\n\nwith open('books.csv') as books_csv:\n  books_reader = csv.DictReader(books_csv, delimiter='@')\n  isbn_list = [book['ISBN'] for book in books_reader]</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingdifferenttypesofcsvfiles\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"writingacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingacsvfile\" goals=\"next-0\"><h2>Writing a CSV File</h2><p><span class=\"sentence\">Naturally if we have the ability to read different CSV files we might want to be able to programmatically create CSV files that save output and data that someone could load into their spreadsheet software. </span><span class=\"sentence\">Let’s say we have a big list of data that we want to save into a CSV file. </span><span class=\"sentence\">We could do the following:</span></p><pre class=\"language-python\"><code>big_list = [\n    {'name': 'Fredrick Stein', 'userid': 6712359021, 'is_admin': False},\n    {'name': 'Wiltmore Denis', 'userid': 2525942, 'is_admin': False}, \n    {'name': 'Greely Plonk', 'userid': 15890235, 'is_admin': False},\n    {'name': 'Dendris Stulo', 'userid': 572189563, 'is_admin': True}\n] \n\nimport csv\n\nwith open('output.csv', 'w') as output_csv:\n  fields = ['name', 'userid', 'is_admin']\n  output_writer = csv.DictWriter(output_csv, fieldnames=fields)\n\n  output_writer.writeheader()\n  for item in big_list:\n    output_writer.writerow(item)</code></pre><p><span class=\"sentence\">In our code above we had a set of dictionaries with the same keys for each, a prime candidate for a CSV. </span><span class=\"sentence\">We import the <code>csv</code> library, and then open a new CSV file in write-mode by passing the <code>'w'</code> argument to the <code>open()</code> function.</span></p><p><span class=\"sentence\">We then define the fields we’re going to be using into a variable called <span class=\"nowrap\"><code>fields</code>.</span> </span><span class=\"sentence\">We then instantiate our CSV writer object and pass two arguments. </span><span class=\"sentence\">The first is <span class=\"nowrap\"><code>output_csv</code>,</span> the file handler object. </span><span class=\"sentence\">The second is our list of fields <code>fields</code> which we pass to the keyword parameter <span class=\"nowrap\"><code>fieldnames</code>.</span></span></p><p><span class=\"sentence\">Now that we’ve instantiated our CSV file writer, we can start adding lines to the file itself! </span><span class=\"sentence\">First we want the headers, so we call <code>.writeheader()</code> on the writer object. </span><span class=\"sentence\">This writes all the fields passed to <code>fieldnames</code> as the first row in our file. </span><span class=\"sentence\">Then we iterate through our <code>big_list</code> of data. </span><span class=\"sentence\">Each <code>item</code> in <code>big_list</code> is a dictionary with each field in <code>fields</code> as the keys. </span><span class=\"sentence\">We call <code>output_writer.writerow()</code> with the <code>item</code> dictionaries which writes each line to the CSV file.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>We have a list in the workspace <code>access_log</code> which is a list of dictionaries we want to write out to a CSV file.</span></p><p><span class=\"sentence\">Let’s start by importing the <code>csv</code> module.</span></p><p><span class=\"sentence\"><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>Open up the file <strong>logger.csv</strong> in the temporary variable <span class=\"nowrap\"><code>logger_csv</code>.</span> </span><span class=\"sentence\">Don’t forget to open the file in write-mode.</span></p><p><span class=\"sentence\"><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>Create a <code>csv.DictWriter</code> instance called <span class=\"nowrap\"><code>log_writer</code>.</span> </span><span class=\"sentence\">Pass <code>logger_csv</code> as the first argument and then <code>fields</code> as a keyword argument to the keyword <span class=\"nowrap\"><code>fieldnames</code>.</span></span></p><p><span class=\"sentence\"><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> </span><span class=\"sentence\">Write the header to <code>log_writer</code> using the <code>.writeheader()</code> method.</span></p><p><span class=\"sentence\"><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>5.</strong> </span><span class=\"sentence\">Iterate through the <code>access_log</code> list and add each element to the CSV using <span class=\"nowrap\"><code>log_writer.writerow()</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">access_log = [{'time': '08:39:37', 'limit': 844404, 'address': '1.227.124.181'}, {'time': '13:13:35', 'limit': 543871, 'address': '198.51.139.193'}, {'time': '19:40:45', 'limit': 3021, 'address': '172.1.254.208'}, {'time': '18:57:16', 'limit': 67031769, 'address': '172.58.247.219'}, {'time': '21:17:13', 'limit': 9083, 'address': '124.144.20.113'}, {'time': '23:34:17', 'limit': 65913, 'address': '203.236.149.220'}, {'time': '13:58:05', 'limit': 1541474, 'address': '192.52.206.76'}, {'time': '10:52:00', 'limit': 11465607, 'address': '104.47.149.93'}, {'time': '14:56:12', 'limit': 109, 'address': '192.31.185.7'}, {'time': '18:56:35', 'limit': 6207, 'address': '2.228.164.197'}]\nfields = ['time', 'address', 'limit']\n\nimport csv\n\nwith open('logger.csv', 'w') as logger_csv:\n  log_writer = csv.DictWriter(logger_csv, fieldnames=fields)\n  log_writer.writeheader()\n  for line in access_log:\n    log_writer.writerow(line)\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"readingajsonfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingajsonfile\" goals=\"next-0\"><h2>Reading a JSON File</h2><p><span class=\"sentence\">CSV isn’t the only file format that Python has a built-in library for. </span><span class=\"sentence\">We can also use Python’s file tools to read and write JSON. </span><span class=\"sentence\">JSON, an abbreviation of JavaScript Object Notation, is a file format inspired by the programming language JavaScript. </span><span class=\"sentence\">The name, like CSV is a bit of a misnomer — some JSON is not valid JavaScript (and plenty of JavaScript is not valid JSON).</span></p><p><span class=\"sentence\">JSON’s format is endearingly similar to Python dictionary syntax, and so JSON files might be easy to read from a Python developer standpoint. </span><span class=\"sentence\">Nonetheless, Python comes with a <code>json</code> package that will help us parse JSON files into actual Python dictionaries. </span><span class=\"sentence\">Suppose we have a JSON file like the following:</span></p><p><span class=\"sentence\"><strong>purchase_14781239.json</strong></span></p><pre class=\"language-json\"><code>'{\n  \"user\": \"ellen_greg\",\n  \"action\": \"purchase\",\n  \"item_id\": 14781239,\n}'</code></pre><p><span class=\"sentence\">We would be able to read that in as a Python dictionary with the following code:</span></p><p><span class=\"sentence\"><strong>json_reader.py</strong></span></p><pre class=\"language-python\"><code>import json\n\nwith open('purchase_14781239.json') as purchase_json:\n  purchase_data = json.load(purchase_json)\n\nprint(purchase_data['user'])\n# Prints 'ellen_greg'</code></pre><p><span class=\"sentence\">First we import the <code>json</code> package. </span><span class=\"sentence\">We opened the file using our trusty <code>open()</code> command. </span><span class=\"sentence\">Since we’re opening it in read-mode we just need to pass the file name. </span><span class=\"sentence\">We save the file in the temporary variable <span class=\"nowrap\"><code>purchase_json</code>.</span></span></p><p><span class=\"sentence\">We continue by parsing <code>purchase_json</code> using <span class=\"nowrap\"><code>json.load()</code>,</span> creating a Python dictionary out of the file. </span><span class=\"sentence\">Saving the results into <code>purchase_data</code> means we can interact with it. </span><span class=\"sentence\">We print out one of the values of the JSON file by keying into the <code>purchase_data</code> object.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Let’s read a JSON file! </span><span class=\"sentence\">Start by importing the <code>json</code> module.</span></p><p><span class=\"sentence\">Import the JSON library with the following command:</span></p><pre class=\"language-python\"><code>import json</code></pre><p><span class=\"sentence\"><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Open up the file<strong>message.json</strong>, saving the file object to the variable <span class=\"nowrap\"><code>message_json</code>.</span></span></p><p><span class=\"sentence\">Open the file in read-mode, without passing any additional arguments to <span class=\"nowrap\"><code>open()</code>.</span></span></p><p><span class=\"sentence\">Remember the syntax for opening a file:</span></p><pre class=\"language-python\"><code>with open('file.json') as file_json:\n  pass</code></pre><p><span class=\"sentence\"><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Pass the JSON file object as an argument to <code>json.load()</code> and save the resulting Python dictionary as <span class=\"nowrap\"><code>message</code>.</span></span></p><p><span class=\"sentence\"><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> </span><span class=\"sentence\"> Print out <span class=\"nowrap\"><code>message['text']</code>.</span></span></p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import json\n\nwith open('message.json') as message_json:\n  message = json.load(message_json)\n  print(message['text'])</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingajsonfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"writingajsonfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingajsonfile\" goals=\"next-0\"><h2>Writing a JSON File</h2><p><span class=\"sentence\">Naturally we can use the <code>json</code> library to translate Python objects to JSON as well. </span><span class=\"sentence\">This is especially useful in instances where you’re using a Python library to serve web pages, you would also be able to serve JSON. </span><span class=\"sentence\">Let’s say we had a Python dictionary we wanted to save as a JSON file:</span></p><pre class=\"language-python\"><code>turn_to_json = {\n  'eventId': 674189,\n  'dateTime': '2015-02-12T09:23:17.511Z',\n  'chocolate': 'Semi-sweet Dark',\n  'isTomatoAFruit': True\n}</code></pre><p><span class=\"sentence\">We’d be able to create a JSON file with that information by doing the following:</span></p><pre class=\"language-python\"><code>import json\n\nwith open('output.json', 'w') as json_file:\n  json.dump(turn_to_json, json_file)</code></pre><p><span class=\"sentence\">We import the <code>json</code> module, open up a write-mode file under the variable <span class=\"nowrap\"><code>json_file</code>,</span> and then use the <code>json.dump()</code> method to write to the file. </span><span class=\"sentence\"><code>json.dump()</code> takes two arguments: </span><span class=\"sentence\">first the data object, then the file object you want to save.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Instructions</strong></h4><p><span class=\"sentence\"><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">In your workspace we’ve put dictionary called <span class=\"nowrap\"><code>data_payload</code>.</span> </span><span class=\"sentence\">We want to save this to a file called <strong>data.json</strong>.</span></p><p><span class=\"sentence\">Let’s start by importing the <code>json</code> library.</span></p><p><span class=\"sentence\"><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">Open a new file object in the variable <span class=\"nowrap\"><code>data_json</code>.</span> </span><span class=\"sentence\">The filename should be <code>'data.json'</code> and the file should be opened in write-mode.</span></p><p><span class=\"sentence\">Remember to open a file in write-mode with the following syntax:</span></p><pre class=\"language-python\"><code>with open('file.json', 'w') as file_json:\n  pass</code></pre><p><span class=\"sentence\"><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Call <code>json.dump()</code> with <code>data_payload</code> and <code>data_json</code> to convert our data to JSON and then save it to the file <strong>data.json</strong>.</span></p><p><span class=\"sentence\">Using <code>json.dump()</code> with the file object as a second argument writes the resulting JSON to the file:</span></p><pre class=\"language-python\"><code>payload = {'message': 'OK'}\nwith open('file.json', 'w') as file_json:\n  json.dump(payload, file_json)</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">data_payload = [\n  {'interesting message': 'What is JSON? A web application\\'s little pile of secrets.',\n   'follow up': 'But enough talk!'}\n]\n\nimport json\n\nwith open('data.json', 'w') as data_json:\n  json.dump(data_payload, data_json)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingajsonfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"review","section":"interactivelesson","goals":[],"html":"<x-step id=\"review\" goals=\"\"><h2>Review</h2><p><span class=\"sentence\">Now you know all about files! </span><span class=\"sentence\">You were able to:</span></p><div class=\"row padded\"><div class=\"grow\"> <ul> <li><span class=\"sentence\">Open up file objects using <code>open()</code> and <span class=\"nowrap\"><code>with</code>.</span></span></li><li><span class=\"sentence\">Read a file’s full contents using Python’s <code>.read()</code> method.</span></li><li><span class=\"sentence\">Read a file line-by-line using <code>.readline()</code> and <span class=\"nowrap\"><code>.readlines()</code>.</span></span></li><li><span class=\"sentence\">Create new files by opening them in write-mode.</span></li><li><span class=\"sentence\">Append to a file non-destructively by opening a file in append-mode.</span></li><li><span class=\"sentence\">Apply all of the above to different types of data-carrying files including CSV and JSON!</span></li></ul> </div><div style=\"width: 640px\"> <div id=\"ide\"><pre class=\"initcode\">with open('file.txt') as file_object:\n  print(file_object.read())\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=review\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\">You have all the skills necessary to read, write, and update files programmatically, a very useful skill in the Python universe!</span></p></x-step>"},{"section":"multiplechoicequiz","id":"step-14","goals":[],"html":"<x-step id=\"step-14\" goals=\"\"></x-step>"},{"0":"i","1":"d","2":":","3":"m","4":"u","5":"l","6":"t","7":"i","8":"p","9":"l","10":"e","11":"c","12":"h","13":"o","14":"i","15":"c","16":"e","17":"q","18":"u","19":"i","20":"z","id":"step-15","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-15\" goals=\"next-0\"><p><span class=\"sentence\">What Python data type would you use to read in a CSV file as a dictionary?</span></p><p><span class=\"sentence\">json.load</span></p><p><span class=\"sentence\">csv.DictReader</span></p><p><span class=\"sentence\">csv.DictWriter</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-16","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-16\" goals=\"next-0\"><p><span class=\"sentence\">What different modes, passed as arguments to the open() function, are there for opening a file in Python?</span></p><p><span class=\"sentence\">Read-mode (‘r’, the default mode), Write-mode (‘w’), and Append-mode (‘a’).</span></p><p><span class=\"sentence\">Read-mode (‘r’, the default mode), Delete-mode (‘d’), and Update-mode (‘u’).</span></p><p><span class=\"sentence\">Read-mode (‘r’, the default mode), Write-mode (‘w’), and Update-mode (‘u’).</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-17","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-17\" goals=\"next-0\"><p><span class=\"sentence\">What does the with command do in Python?</span></p><p><span class=\"sentence\">Imports a new module for use by the writer of the code.</span></p><p><span class=\"sentence\">Opens a file in read-mode.</span></p><p><span class=\"sentence\">Creates a context-manager, which performs cleanup after exiting the adjacent indented block.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-18","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-18\" goals=\"next-0\"><p><span class=\"sentence\">Which of the following opens a file in Python?</span></p><pre class=\"language-python\"><code>with open('file1.txt') as file_obj:\n  pass</code></pre><pre class=\"language-python\"><code>with open(file.txt) as file_obj:\n  pass</code></pre><pre class=\"language-python\"><code>with file_obj = open('file.txt'):\n  pass</code></pre><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-19","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-19\" goals=\"next-0\"><p><span class=\"sentence\">Which of the following methods on a file object (called file_object) reads the contents of a file and returns it as a string?</span></p><pre class=\"language-python\"><code>file_contents = file_object.read()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.get()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.readlines()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.readline()</code></pre><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-20","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-20\" goals=\"next-0\"><p><span class=\"sentence\">What method reads a single line from a file object variable called file_object?</span></p><p><span class=\"sentence\">file_object.read()</span></p><p><span class=\"sentence\">file_object.readlines()</span></p><p><span class=\"sentence\">file_object.readline()</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"step-21","section":"multiplechoicequiz","goals":[],"html":"<x-step id=\"step-21\" goals=\"\"><p><span class=\"sentence\">What function would you use to render Python data to a JSON file?</span></p><p><span class=\"sentence\">json.write()</span></p><p><span class=\"sentence\">json.dump()</span></p><p><span class=\"sentence\">json.writelines()</span></p></x-step>"},{"section":"freeformproject","id":"step-22","goals":[],"html":"<x-step id=\"step-22\" goals=\"\"></x-step>"},{"id":"freeformproject","section":"freeformproject","goals":[],"html":"<x-step id=\"freeformproject\" goals=\"\"><h2>Hacking The Fender</h2><p><span class=\"sentence\"><code>The Fender</code> , a notorious computer hacker and general villain of the people, has compromised several top-secret passwords including your own. </span><span class=\"sentence\">Your mission, should you choose to accept it, is threefold. </span><span class=\"sentence\">You must acquire access to <code>The Fender</code> ‘s systems, you must update his <code>\"passwords.txt\"</code> file to scramble the secret data. </span><span class=\"sentence\">The last thing you need to do is add the signature of <code>Slash Null</code> , a different hacker whose nefarious deeds could be very conveniently halted by <code>The Fender</code> if they viewed <code>Slash Null</code> as a threat.</span></p><p><span class=\"sentence\">Use your knowledge of working with Python files to retrieve, manipulate, obscure, and create data in your quest for justice. </span><span class=\"sentence\">Work with CSV files and other text files in this exploration of the strength of Python file programming.</span></p><p><span class=\"sentence\">If you get stuck during this project, check out the <strong>project walkthrough video</strong> which can be found in the help menu.</span></p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>Tasks</strong></h4><p><span class=\"sentence\">Mark the tasks as complete by checking them off</span></p><h4>Reading In The Passwords</h4><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> </span><span class=\"sentence\">Are you there? </span><span class=\"sentence\">We’ve opened up a communications link to <code>The Fender</code> ‘s secret computer. </span><span class=\"sentence\">We need you to write a program that will read in the compromised usernames and passwords that are stored in a file called <span class=\"nowrap\"><code>\"passwords.csv\"</code>.</span></span></p><p><span class=\"sentence\">First import the CSV module, since we’ll be needing it to parse the data.</span></p><p><span class=\"sentence\">You can import the CSV module using the following syntax:</span></p><pre class=\"language-python\"><code>import csv</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> </span><span class=\"sentence\">We need to create a list of users whose passwords have been compromised, create a new list and save it to the variable <span class=\"nowrap\"><code>compromised_users</code>.</span></span></p><p><span class=\"sentence\">Creating a new list for a variable called <code>new_list</code> with the following syntax:</span></p><pre class=\"language-python\"><code>new_list = []</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </span><span class=\"sentence\">Next we’ll need you to open up the file itself. </span><span class=\"sentence\">Store it in a file object called <span class=\"nowrap\"><code>password_file</code>.</span></span></p><p><span class=\"sentence\">Use <code>with...as</code> syntax to open a file, remember it begins an indented block:</span></p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # pass</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> </span><span class=\"sentence\"> Pass the <code>password_file</code> object holder to our CSV reader for parsing. </span><span class=\"sentence\">Save the parsed <code>csv.DictReader</code> object as <span class=\"nowrap\"><code>password_csv</code>.</span></span></p><p><span class=\"sentence\">Use <code>csv.DictReader</code> to parse the file like so:</span></p><pre class=\"language-python\"><code>parsed_csv = csv.DictReader(file_object)</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>5.</strong> </span><span class=\"sentence\"> Now we’ll want to iterate through each of the lines in the CSV.</span></p><p><span class=\"sentence\">Create a for loop and save each row of the CSV into the temporary variable <span class=\"nowrap\"><code>password_row</code>.</span></span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>6.</strong> </span><span class=\"sentence\">Inside your <code>for</code> loop, print out <span class=\"nowrap\"><code>password_row['Username']</code>.</span> </span><span class=\"sentence\">This is the username of the person whose password was compromised.</span></p><p><span class=\"sentence\">Run your code, do you see a list of usernames?</span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>7.</strong> </span><span class=\"sentence\">Remove the <code>print</code> statement. </span><span class=\"sentence\">We want to add each username to the list of <span class=\"nowrap\"><code>compromised_users</code>.</span> </span><span class=\"sentence\">Use the list’s <code>.append()</code> method to add the username to <code>compromised_users</code> instead of printing them.</span></p><p><span class=\"sentence\">A list’s <code>.append()</code> method adds it to the list.</span></p><pre class=\"language-python\"><code>my_list.append(my_dict['Key'])</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>8.</strong> </span><span class=\"sentence\">Exit out of your <code>with</code> block for <span class=\"nowrap\"><code>\"passwords.csv\"</code>.</span> </span><span class=\"sentence\">We have all the data we need from that file.</span></p><p><span class=\"sentence\">Start a new <code>with</code> block, opening a file called <span class=\"nowrap\"><code>compromised_users.txt</code>.</span> </span><span class=\"sentence\">Open this file in write-mode, saving the file object as <span class=\"nowrap\"><code>compromised_user_file</code>.</span></span></p><p><span class=\"sentence\">You can open a file in write-mode by passing <code>\"w\"</code> as an argument to <span class=\"nowrap\"><code>open()</code>.</span></span></p><pre class=\"language-python\"><code>with open('new_file.txt', 'w') as new_file:\n  # write to file here</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>9.</strong> </span><span class=\"sentence\">Inside the new context-managed block opened by the <code>with</code> statement start a new <code>for</code> loop.</span></p><p><span class=\"sentence\">Iterate over each of your <span class=\"nowrap\"><code>compromised_users</code>.</span></span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>10.</strong> </span><span class=\"sentence\">Write the username of each <code>compromised_user</code> in <code>compromised_users</code> to <span class=\"nowrap\"><code>compromised_user_file</code>.</span></span></p><p><span class=\"sentence\">Use the file object’s <code>.write()</code> method:</span></p><pre class=\"language-python\"><code>write_me = \"write me to file\"\nwith open('file.txt', 'w') as file_obj:\n  file_obj.write(write_me)</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>11.</strong> </span><span class=\"sentence\">Exit out of that <code>with</code> block. </span><span class=\"sentence\">You’re doing great so far! </span><span class=\"sentence\">We’ve got the data we need to employ as insurance against <span class=\"nowrap\"><code>The Fender</code>.</span></span></p><h4>Notifying the Boss</h4><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>12.</strong> </span><span class=\"sentence\">Your boss needs to know that you were successful in retrieving that compromised data. </span><span class=\"sentence\">We’ll need to send him an encoded message over the internet. </span><span class=\"sentence\">Let’s use JSON to do that.</span></p><p><span class=\"sentence\">First we’ll need to import the <code>json</code> module.</span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>13.</strong> </span><span class=\"sentence\">Open a new JSON file in write-mode called <span class=\"nowrap\"><code>boss_message.json</code>.</span> </span><span class=\"sentence\">Save the file object to the variable <span class=\"nowrap\"><code>boss_message</code>.</span></span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>14.</strong> </span><span class=\"sentence\">Create a Python dictionary object within your <code>with</code> statement that relays a boss message. </span><span class=\"sentence\">Call this <span class=\"nowrap\"><code>boss_message_dict</code>.</span></span></p><p><span class=\"sentence\">Give it a <code>\"recipient\"</code> key with a value <span class=\"nowrap\"><code>\"The Boss\"</code>.</span></span></p><p><span class=\"sentence\">Also give it a <code>\"message\"</code> key with the value <span class=\"nowrap\"><code>\"Mission Success\"</code>.</span></span></p><p><span class=\"sentence\">Define a Python dictionary using the curly braces <code>{</code> and <span class=\"nowrap\"><code>}</code>:</span></span></p><pre class=\"language-python\"><code>new_dict = {\n  'key1': 'val1',\n  'key2': 'val2'\n}</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>15.</strong> </span><span class=\"sentence\">Write out <code>boss_message_dict</code> to <code>boss_message</code> using <span class=\"nowrap\"><code>json.dump()</code>.</span></span></p><p><span class=\"sentence\"><code>json.dump()</code> takes two arguments: </span><span class=\"sentence\">a Python data object (like a dictionary or an array) an a file object to write the resulting JSON to.</span></p><p><span class=\"sentence\">Pass the two parameters to <code>json.dump()</code> like so:</span></p><pre class=\"language-python\"><code>json.dump(dict_obj, file_obj)</code></pre><h4>Scrambling the Password</h4><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>16.</strong> </span><span class=\"sentence\">Now that we’ve safely recovered the compromised users we’ll want to remove the <code>\"passwords.csv\"</code> file completely.</span></p><p><span class=\"sentence\">Create a new <code>with</code> block and open <code>\"new_passwords.csv\"</code> in write-mode. </span><span class=\"sentence\">Save the file object to a variable called <span class=\"nowrap\"><code>new_passwords_obj</code>.</span></span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>17.</strong> </span><span class=\"sentence\">Enemy of the people, <span class=\"nowrap\"><code>Slash Null</code>,</span> is who we want <code>The Fender</code> to think was behind this attack. </span><span class=\"sentence\">He has a signature, whenever he hacks someone he adds this signature to one of the files he touches. </span><span class=\"sentence\">Here is the signature:</span></p><pre class=\"language-python\"><code> _  _     ___   __  ____             \n/ )( \\   / __) /  \\(_  _)            \n) \\/ (  ( (_ \\(  O ) )(              \n\\____/   \\___/ \\__/ (__)             \n _  _   __    ___  __ _  ____  ____  \n/ )( \\ / _\\  / __)(  / )(  __)(    \\ \n) __ (/    \\( (__  )  (  ) _)  ) D ( \n\\_)(_/\\_/\\_/ \\___)(__\\_)(____)(____/ \n        ____  __     __   ____  _  _ \n ___   / ___)(  )   / _\\ / ___)/ )( \\\n(___)  \\___ \\/ (_/\\/    \\\\___ \\) __ (\n       (____/\\____/\\_/\\_/(____/\\_)(_/\n __ _  _  _  __    __                \n(  ( \\/ )( \\(  )  (  )               \n/    /) \\/ (/ (_/\\/ (_/\\             \n\\_)__)\\____/\\____/\\____/</code></pre><p><span class=\"sentence\">Save that as a multiline string to the variable <span class=\"nowrap\"><code>slash_null_sig</code>.</span></span></p><p><span class=\"sentence\">Remember you can start a multiline string with three quotes:</span></p><pre class=\"language-python\"><code>multiline_str = \"\"\"\n  ___  __    __   __   \n / __)/  \\  /  \\ (  )  \n( (__(  O )(  O )/ (_/\\\n \\___)\\__/  \\__/ \\____/\n\"\"\"</code></pre><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>18.</strong> </span><span class=\"sentence\">Write <code>slash_null_sig</code> to <span class=\"nowrap\"><code>new_passwords_obj</code>.</span> </span><span class=\"sentence\">Now we have the file to replace <code>passwords.csv</code> with!</span></p><p><span class=\"sentence\"><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>19.</strong> </span><span class=\"sentence\">What an incredible success! </span><span class=\"sentence\">We’ll take care of moving the new passwords file over the old one in case you want to practice hacking <code>The Fender</code> in the future.</span></p></div><div style=\"width: 640px\"> <div id=\"ide\"><pre class=\"initcode\">print(a);</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=freeformproject\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><span class=\"sentence\">Thank you for your service, programmer.</span></p></x-step>"}],"goals":18,"title":"Files"}