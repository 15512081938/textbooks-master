{"sections":[{"id":"interactivelesson","title":"互动课","status":"","background":"","goals":12,"duration":25,"steps":["step-0","readingafile","iteratingthroughlines","readingaline","writingaline","appendingtoafile","whatiswithwith","whatisacsvfile","readingacsvfile","readingdifferenttypesofcsvfiles","writingacsvfile","readingajsonfile","writingajsonfile","review"]},{"id":"multiplechoicequiz","title":"多项选择测验","status":"","background":"","goals":6,"duration":5,"steps":["step-14","multiplechoicequiz","step-16","step-17","step-18","step-19","step-20","step-21"]},{"id":"freeformproject","title":"自由形式的项目","status":"","background":"","goals":0,"duration":10,"steps":["step-22","freeformproject"]}],"steps":[{"stage":"Files","description":"LEARN PYTHON: FILES","section":"interactivelesson","id":"step-0","goals":[],"html":"<x-step id=\"step-0\" goals=\"\"></x-step>"},{"id":"readingafile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingafile\" goals=\"next-0\"><h2>读取文件</h2><p>计算机使用文件系统来存储和检索数据。每个文件都是相关信息的单独容器。如果您曾经保存过文档，下载了歌曲，甚至发送过电子邮件，那么您已经在某台计算机上创建了文件。甚至您正在学习环境中编辑的Python程序<strong>script.py</strong>也是一个文件。</p><p>那么，我们如何使用Python与文件交互？我们将学习如何使用代码读取和写入不同类型的文件。假设我们有一个名为<strong>real_cool_document.txt**</strong>的文件，其中包含以下内容：</p><p><strong>real_cool_document.txt</strong></p><pre class=\"language-python\"><code>Wowsers!</code></pre><p>我们可以像这样读取该文件：reading_a_file.py</p><pre class=\"language-python\"><code>with open('real_cool_document.txt') as cool_doc:\n  cool_contents = cool_doc.read()\nprint(cool_contents)</code></pre><p>这将打开一个名为的文件对象 <code>cool_doc</code> 。并创建一个新的缩进块，您可以在其中读取打开的文件的内容。然后，我们读取文件的内容 <code>cool_doc</code> 。 使用 <code>cool_doc.read()</code> 。 并将结果字符串保存到变量中 <code>cool_contents</code> 。 然后我们打印 <code>cool_contents</code> ，输出语句 <code>Wowsers</code> !</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 使用 <code>with</code> 打开文件 <strong>welcome.txt</strong>。将文件对象另存为 <code>text_file</code> 。</p><p><button class=\"btn btn-yellow\">卡住？ 得到提示</button></p><pre class=\"language-python\"><code>Use this syntax to open a file:\nwith open('filename.txt') as file_object:\n# indented block here</code></pre><p><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> 阅读的内容 <code>text_file</code> 。 并将结果保存到中 <code>text_data</code> 。 </p><p>在文件对象上使用以下语法将文件内容读入变量：</p><pre class=\"language-python\"><code>file_string = file_object.read()</code></pre><p><input id=\"readingafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> 打印出 <code>text_data</code> .</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('welcome.txt') as text_file:\n  text_data = text_file.read()\n  print(text_data)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingafile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"iteratingthroughlines","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"iteratingthroughlines\" goals=\"next-0\"><h2>通过线迭代</h2><p>读取文件时，我们可能希望像 <code>.read()</code> 返回一样将整个文档抓成一个字符串。但是，如果我们想将每一行存储在一个变量中怎么办？我们可以使用该 <code>.readlines()</code> 函数逐行读取文本文件，而不用整个内容。假设我们有一个文件：</p><p><strong>keats_sonnet.txt</strong></p><pre class=\"language-python\"><code>To one who has been long in city pent,\n’Tis very sweet to look into the fair\nAnd open face of heaven,—to breathe a prayer\nFull in the smile of the blue firmament.</code></pre><p><strong>iterating_through_lines.py</strong></p><pre class=\"language-python\"><code>with open('keats_sonnet.txt') as keats_sonnet:\n  for line in keats_sonnet.readlines():\n    print(line)</code></pre><p>上面的脚本创建一个名为的临时文件对象 <code>keats_sonnet</code> 指向文件<strong>keats_sonnet.txt</strong>。然后，它遍历文档的每一行并打印出整个文件。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"iteratingthroughlines\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 使用一条 <code>with</code> 语句创建一个指向文件<strong>how_many_lines.txt</strong>的文件对象。将该文件对象存储在变量中 <code>lines_doc</code> 。</p><p>请记住使用 <code>with</code> 语法打开文件：</p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # indented block here</code></pre><p><input id=\"iteratingthroughlines\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>迭代通过每个中的线的 <code>lines_doc.readlines()</code> 使用 <code>for</code> 循环。 在for循环中，打印出<strong>how_many_lines.txt</strong>的每一行。 您可以使用以下语法来打印文件的每一行：</p><pre class=\"language-python\"><code>for line in file_object.readlines():\n  print(line)</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('how_many_lines.txt') as lines_doc:\n  for line in lines_doc.readlines():\n    print(line)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=iteratingthroughlines\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"readingaline","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingaline\" goals=\"next-0\"><h2>读线</h2><p>有时，您不想遍历整个文件。为此，有一个不同的文件的方法， <code>.readline()</code> ，这只会一次读取一行。如果以此方式逐行读取整个文档，则后续对的调用 <code>.readline()</code> 不会引发错误，但会开始返回空字符串（ <code>\"\"</code> ）。假设我们有这个文件： <strong>millay_sonnet.txt</strong></p><pre class=\"language-python\"><code>I shall forget you presently, my dear,\nSo make the most of this, your little day,\nYour little month, your little half a year,\nEre I forget, or die, or move away,</code></pre><p><strong>reading_a_line.py</strong></p><pre class=\"language-python\"><code>with open('millay_sonnet.txt') as sonnet_doc:\n  first_line = sonnet_doc.readline()\n  second_line = sonnet_doc.readline()\n  print(second_line)</code></pre><p>该脚本还创建一个文件对象 <code>sonnet_doc</code> ，该文件对象指向文件<strong>millay_sonnet.txt</strong>。然后，使用读取第一行 <code>sonnet_doc.readline()</code> 并将其保存到变量中 <code>first_line</code> 。 然后，将第二行（ <code>So make the most of this, your little day,</code> ）保存到变量中 <code>second_line</code> ，然后将其打印出来。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p>使用一条 <code>with</code> 语句，创建一个指向文件<strong>just_the_first.txt</strong>的文件对象。将该文件对象存储在变量中 <code>first_line_doc</code> 。</p><p>请记住使用 <code>with</code> 语法打开文件：</p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # indented block here</code></pre><p><input id=\"readingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>将<strong>just_the_first.txt</strong>的第一行保存到变量中 <code>first_line</code> 。 使用文件对象方法 <code>.readline()</code> 将一行存储到变量中 <code>line</code> 。</p><p><input id=\"readingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>打印出变量 <code>first_line</code> 。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('just_the_first.txt') as first_line_doc:\n  first_line = first_line_doc.readline()\n  print(first_line)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingaline\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"writingaline","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingaline\" goals=\"next-0\"><h2>写文件</h2><p>读取文件是件好事，但是如果我们要创建自己的文件怎么办？使用Python，我们可以做到这一点。事实证明，我们 <code>open()</code> 用来打开文件以读取的函数需要另一个参数来打开要写入的文件。</p><p><strong>writing_a_line.py</strong></p><pre class=\"language-python\"><code>with open('generated_file.txt', 'w') as gen_file:\n  gen_file.write(\"What an incredible file!\")</code></pre><p>在这里，我们将参数传递 <code>'w'</code> 给 <code>open()</code> ，以指示以写模式打开文件。缺省参数是 <code>'r'</code> and，并且像往常一样 <code>'r'</code> 以 <code>open()</code> 读取模式打开文件。</p><p>此代码在<strong>script.py</strong>所在的文件夹中创建一个新文件，并为其提供文本 <code>What an incredible file!</code> 。 重要的是要注意，如果已经有一个名为<strong>generated_file.txt</strong>的文件，它将完全覆盖该文件，从而擦除之前的内容。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"writingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 使用带有的函数为文件<strong>bad_bands.txt</strong>创建文件对象。 <code>open()</code> 和 <code>w</code> 论据。将此对象分配给临时变量 <code>bad_bands_doc</code> 。</p><p>记住要使用该 <code>with</code> 语句打开文件，并传递 <code>'w'</code> 参数以写入模式打开它：</p><pre class=\"language-python\"><code>with open('file_to_write.txt', 'w') as file_object:\n  # indent</code></pre><p><input id=\"writingaline\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> 使用 <code>bad_bands_doc.write()</code> 方法将您不喜欢的音乐团体的名称添加到文档中 <code>bad_bands</code> 。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('bad_bands.txt', 'w') as bad_bands_doc:\n\n  bad_bands_doc.write('The Beatles')\n  # Weren't expecting THAT were you??</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingaline\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"appendingtoafile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"appendingtoafile\" goals=\"next-0\"><h2>附加到文件</h2><p>因此，也许完全删除和覆盖现有文件会让您感到困扰。有没有办法只向文件添加一行而不完全删除它？当然有！不用使用 <code>'w'</code> write-mode 参数打开文件，而是使用 <code>'a'</code> append-mode 打开文件。如果我们生成的文件包含以下内容：</p><p><strong>generated_file.txt</strong></p><pre class=\"language-python\"><code>This was a popular file...</code></pre><p>然后，我们可以使用以下代码向该文件添加另一行：</p><p><strong>appending_to_a_file.py</strong></p><pre class=\"language-python\"><code>with open('generated_file.txt', 'a') as gen_file:\n  gen_file.write(\"... and it still is\")</code></pre><p>在上面的代码中，我们在临时变量中打开一个文件对象 <code>gen_file</code> 。 该变量指向文件<strong>generated_file.txt</strong>，并且由于它是在追加模式下打开的，因此将该行 <code>... and it still is</code> 作为新行添加到文件中。如果要在运行脚本后打开文件，它将如下所示：</p><p><strong>generated_file.txt</strong></p><pre class=\"language-python\"><code>This was a popular file...\n... and it still is</code></pre><p>请注意，以append模式打开文件（ <code>'a'</code> 作为的参数） <code>open()</code> ，这意味着使用文件对象的 <code>.write()</code> 方法会将传递到文件末尾的所有内容<strong>追加</strong>到新行中。如果我们再次运行<strong>script.py</strong>，则生成的文件的内容将如下所示：</p><p><strong>generated_file.txt</strong></p><pre class=\"language-python\"><code>This was a popular file...\n... and it still is\n... and it still is</code></pre><p>注意，我们已经 <code>\"... and it still is\"</code> 第二次附加到文件了！这是因为在<strong>script.py</strong>中，我们以附加模式打开了<strong>generated_file.txt</strong>。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"appendingtoafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>我们有一个文件<strong>cool_dogs.txt</strong>，其中充满了我们知道的所有酷狗。不知何故，在编制此列表时，我们忘记了一只非常酷的狗。让我们通过将他添加到<strong>cool_dogs.txt</strong>中来解决该问题。</p><p>在附加模式下打开我们的文件<strong>cool_dogs.txt</strong>并将其分配给文件对象<strong>cool_dogs_file</strong>。</p><p><input id=\"appendingtoafile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>在您的with块中，将“ Air Buddy”添加到<strong>cool_dogs.txt</strong>。空中伙伴（Air Buddy）是打篮球的金毛猎犬，这不仅仅使他有资格获得这份名单。</p><p>用于 <code>cool_dogs_file.write()</code> 在<strong>cool_dogs.txt</strong>的末尾添加一个字符串</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('cool_dogs.txt', 'a') as cool_dogs_file:\n  cool_dogs_file.write('Air Buddy')</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=appendingtoafile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"whatiswithwith","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"whatiswithwith\" goals=\"next-0\"><h2>“with”是什么？</h2><p> <code>with</code> 到目前为止，我们一直在用此块打开这些文件，但是似乎只能在缩进块中使用文件变量似乎有点奇怪。这是为什么？该 <code>with</code> 关键字所调用一种叫做上下文管理器为我们调用的文件 <code>open()</code> 上。上下文管理器负责在调用时打开文件 <code>open()</code> ，然后在退出缩进块后关闭文件。</p><p>为什么关闭文件如此复杂？嗯，我们代码的大多数其他方面都处理Python本身控制的事情。您创建的所有变量：整数，列表，字典-这些都是Python对象，Python知道如何在使用它们时对其进行清理。由于您的文件存在于 Python脚本之外，因此我们需要在完成处理后告诉Python，以便它可以关闭与该文件的连接。不必要地打开文件连接可能会影响性能或影响计算机上可能正试图访问该文件的其他程序。</p><p>该 <code>with</code> 语法替换了您需要 <code>.close()</code> 手动调用文件对象的访问文件的旧方法。只要我们记得之后要关闭文件连接，我们仍然可以打开文件并使用旧语法附加到文件中。</p><pre class=\"language-python\"><code>fun_cities_file = open('fun_cities.txt', 'a')\n\n# We can now append a line to \"fun_cities\".\nfun_cities_file.write(\"Montréal\")\n\n# But we need to remember to close the file\nfun_cities_file.close()</code></pre><p>在上面的脚本中，我们在文件<strong>fun_cities.txt</strong>中添加了“Montréal”作为新行。但是，由于我们使用的是旧式语法，因此我们必须记住之后要关闭文件。由于这必然更加冗长（至少需要多一行代码）而又没有表现力， <code>with</code> 因此首选使用。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"whatiswithwith\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>在<strong>what_is_with_with.py</strong>中，有一个文件对象未正确关闭。让我们通过更改语法来修复它！</p><p>删除此行：</p><pre class=\"language-python\"><code>close_this_file = open('fun_file.txt')</code></pre><p>并将其更改为使用 <code>with</code> 我们先前练习中的语法。</p><p>记住要缩进身体的其余部分，这样我们就不会受伤 <code>IndentError</code> 。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('fun_file.txt') as close_this_file:\n\n  setup = close_this_file.readline()\n  punchline = close_this_file.readline()\n\n  print(setup)\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=whatiswithwith\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"whatisacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"whatisacsvfile\" goals=\"next-0\"><h2>什么是CSV文件？</h2><p>文本文件不是Python可以读取的唯一内容，但它们是我们不需要任何其他解析库的唯一内容。CSV文件是文本文件的示例，该文本文件为其数据强加了结构。CSV代表逗号分隔值，而CSV文件通常是将电子表格软件（例如Microsoft Excel或Google表格）中的数据导出为可移植格式的方式。如下所示的电子表格</p><table> <thead> <tr> <th>名称</th><th>用户名</th><th>电子邮件</th></tr> </thead> <tbody><tr> <td>Roger Smith</td><td>rsmith</td><td><a href=\"mailto:wigginsryan@yahoo.com\" target=\"_blank\">wigginsryan@yahoo.com</a></td></tr> <tr> <td>Michelle Beck</td><td>mlbeck</td><td><a href=\"mailto:hcosta@hotmail.com\" target=\"_blank\">hcosta@hotmail.com</a></td></tr> <tr> <td>Ashley Barker</td><td>a_bark_x</td><td><a href=\"mailto:a_bark_x@turner.com\" target=\"_blank\">a_bark_x@turner.com</a></td></tr> <tr> <td>Lynn Gonzales</td><td>goodmanjames</td><td><a href=\"mailto:lynniegonz@hotmail.com\" target=\"_blank\">lynniegonz@hotmail.com</a></td></tr> <tr> <td>Jennifer Chase</td><td>chasej</td><td><a href=\"mailto:jchase@ramirez.com\" target=\"_blank\">jchase@ramirez.com</a></td></tr> <tr> <td>Charles Hoover</td><td>choover</td><td><a href=\"mailto:choover89@yahoo.com\" target=\"_blank\">choover89@yahoo.com</a></td></tr> <tr> <td>Adrian Evans</td><td>adevans</td><td><a href=\"mailto:adevans98@yahoo.com\" target=\"_blank\">adevans98@yahoo.com</a></td></tr> <tr> <td>Susan Walter</td><td>susan82</td><td><a href=\"mailto:swilliams@yahoo.com\" target=\"_blank\">swilliams@yahoo.com</a></td></tr> <tr> <td>Stephanie King</td><td>stephanieking</td><td><a href=\"mailto:sking@morris-tyler.com\" target=\"_blank\">sking@morris-tyler.com</a></td></tr> <tr> <td>Erika Miller</td><td>jessica32</td><td><a href=\"mailto:ejmiller79@yahoo.com\" target=\"_blank\">ejmiller79@yahoo.com</a></td></tr> <tr> <td></td><td></td><td></td></tr> </tbody></table> <p>在CSV文件中，相同的确切数据将被呈现为：</p><p><strong>users.csv</strong></p><pre class=\"language-python\"><code>Name,Username,Email\nRoger Smith,rsmith,wigginsryan@yahoo.com\nMichelle Beck,mlbeck,hcosta@hotmail.com\nAshley Barker,a_bark_x,a_bark_x@turner.com\nLynn Gonzales,goodmanjames,lynniegonz@hotmail.com\nJennifer Chase,chasej,jchase@ramirez.com\nCharles Hoover,choover,choover89@yahoo.com\nAdrian Evans,adevans,adevans98@yahoo.com\nSusan Walter,susan82,swilliams@yahoo.com\nStephanie King,stephanieking,sking@morris-tyler.com\nErika Miller,jessica32,ejmiller79@yahoo.com</code></pre><p>请注意，CSV文件的第一行实际上并不代表任何数据，只是文件其余部分中存在的数据标签。文件的其余行与电子表格软件中的行相同，只是它们没有被分隔为不同的单元格，而是被分隔开了……好吧，我想可以说它们之间用逗号分隔了。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"whatisacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> CSV文件只是纯文本文件！ <code>logger.csv</code> 使用我们的标准 <code>with</code> 语法打开，将文件对象保存在临时变量中 <code>log_csv_file</code> 。</p><p><input id=\"whatisacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> 调用文件以打印出的内容。 <code>logger.csv</code> 和 <code>.read()</code> 请注意，它被解析为字符串。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">with open('logger.csv') as log_csv_file:\n  print(log_csv_file.read())</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=whatisacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"readingacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingacsvfile\" goals=\"next-0\"><h2>读取CSV文件</h2><p>回顾上一次练习的CSV文件：</p><p><strong>users.csv</strong></p><pre class=\"language-python\"><code>Name,Username,Email\nRoger Smith,rsmith,wigginsryan@yahoo.com\nMichelle Beck,mlbeck,hcosta@hotmail.com\nAshley Barker,a_bark_x,a_bark_x@turner.com\nLynn Gonzales,goodmanjames,lynniegonz@hotmail.com</code></pre><p>即使我们可以毫无问题地将这些行读取为文本，也可以通过多种方式以更适合编程目的的格式访问数据。在Python中，我们可以使用 <code>csv</code> 库的 <code>DictReader</code> 对象将该数据转换为字典。这是我们在上表中创建所有用户的电子邮件地址列表的方式：</p><pre class=\"language-python\"><code>import csv\n\nlist_of_email_addresses = []\nwith open('users.csv', newline='') as users_csv:\n  user_reader = csv.DictReader(users_csv)\n  for row in user_reader:\n    list_of_email_addresses.append(row['Email'])</code></pre><p>在上面的代码中，我们首先导入我们的 <code>csv</code> 库，这为我们提供了解析CSV文件的工具。然后 <code>list_of_email_addresses</code> ，我们创建一个空列表，稍后将使用CSV中的电子邮件地址填充该列表。然后，我们使用临时变量打开<strong>users.csv</strong>文件 <code>users_csv</code> 。</p><p>我们将额外的关键字参数 <code>newline=''</code> 传递给文件打开 <code>open()</code> 函数，以便我们不会意外地将其中一个数据字段的换行符误认为是CSV中的新行(有关详细信息，请参见<a href=\"https://docs.python.org/3/library/csv.html#id3\" target=\"_blank\">Python文档</a>)。</p><p>打开新的CSV文件后，我们使用 csv.DictReader使用者CSV它将CSV文件的行转换为可用于访问方法的Python词典。默认情况下，字典的键是CSV文件第一行中的条目。由于CSV的第一行将CSV中的第三个字段称为“ <code>Email</code> ”，因此我们可以将其用作DictReader每一行中的键。</p><p>当我们遍历 <code>user_reader</code> 对象的行时，我们以字典的方式访问CSV中的所有行（第一行除外，该行用于标记字典的键）。通过访问 <code>\"Email\"</code> 每行的键，我们可以获取该行中的电子邮件地址并将其附加到我们的 <code>list_of_email_addresses</code> 。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 导入 <code>csv</code> 模块。</p><p><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>在临时变量 <code>cool_csv_file</code> 中打开文件<strong>cool_csv.csv</strong> 。</p><p><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>使用 <code>csv.DictReader</code> 将的内容读取 <code>cool_csv_file</code> 到名为的新变量中 <code>cool_csv_dict</code> 。</p><p> <code>DictReader</code> 使用以下语法创建它的构造函数：</p><pre class=\"language-python\"><code>file_dict = csv.DictReader(file_object)</code></pre><p><input id=\"readingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> <strong>cool_csv.csv</strong> 包含有关CSV中每个人的一个很酷的事实。</p><p>对于每行 <code>cool_csv_dict</code> 打印出该行的 <code>\"Cool Fact\"</code> 。</p><p>您可以使用 <code>for...in</code> 语法在 <code>DictReader</code> 对象之间循环。这些对象中的每一个都是字典，文件的第一行指示键。</p><pre class=\"language-python\"><code>for row in csv_file_dict:\n  print(row['Key'])</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import csv\n\nwith open('cool_csv.csv') as cool_csv_file:\n  cool_csv_dict = csv.DictReader(cool_csv_file)\n  for row in cool_csv_dict:\n    print(row['Cool Fact'])</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"readingdifferenttypesofcsvfiles","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingdifferenttypesofcsvfiles\" goals=\"next-0\"><h2>读取不同类型的CSV文件</h2><p>我需要与您保持水平，在过去的两个练习中我一直在向您撒谎。好吧，有点。我们一直在将CSV文件视为逗号分隔值文件。CSV确实代表着这一点，但是如今，分隔值的其他方法也确实是有效的CSV文件。</p><p>人们过去常常将“制表符分隔的值”文件称为TSV文件，但是随着其他分隔符的普及，每个人都意识到 <code>.[a-z]sv</code> 为使用的每个值分隔符创建新的文件格式是不可持续的。</p><p>因此，我们将具有不同值列表的所有文件称为CSV文件，然后使用不同的定界符（例如逗号或制表符）来指示不同值在哪里开始和停止。</p><p>假设我们有一个通讯录。由于地址通常在其中使用逗号，因此我们需要对信息使用其他定界符。由于我们的数据中都没有分号（ <code>;</code> ），因此我们可以使用分号。</p><p><strong>addresses.csv</strong></p><pre class=\"language-python\"><code>Name;Address;Telephone\nDonna Smith;126 Orr Corner Suite 857\\nEast Michael, LA 54411;\n906-918-6560\nAaron Osborn;6965 Miller Station Suite 485\\nNorth Michelle, KS 64364;\n815.039.3661x42816\nJennifer Barnett;8749 Alicia Vista Apt. 288\\nLake Victoriaberg, TN 51094;\n397-796-4842x451\nJoshua Bryan;20116 Stephanie Stravenue\\nWhitneytown, IA 87358;\n(380)074-6173\nAndrea Jones;558 Melissa Keys Apt. 588\\nNorth Teresahaven, WA 63411;\n+57(8)7795396386\nVictor Williams;725 Gloria Views Suite 628\\nEast Scott, IN 38095;\n768.708.3411x954</code></pre><p>注意 <code>\\n</code> 字符，这是换行的转义序列。数据中的 <code>\\n</code> 字符可能会换行，这就是为什么我们将 <code>newline=''</code> 关键字参数传递给 <code>open()</code> 函数的原因。</p><p>另请注意，其中许多地址中都有逗号！没关系，我们仍然可以阅读它。例如，如果我们想打印出此CSV文件中的所有地址，则可以执行以下操作：</p><pre class=\"language-python\"><code>import csv\n\nwith open('addresses.csv', newline='') as addresses_csv:\n  address_reader = csv.DictReader(addresses_csv, delimiter=';')\n  for row in address_reader:\n    print(row['Address'])</code></pre><p>注意，当我们调用时， <code>csv.DictReader</code> 我们传入 <code>delimiter</code> 参数，该参数是用来在CSV中描绘单独字段的字符串。然后，我们遍历CSV并打印出每个地址。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 导入 <code>csv</code> 模块。</p><p><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> 在变量 <code>books_csv</code> 中打开文件<strong>books.csv</strong> 。</p><p><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>创建一个 <code>DictReader</code> 使用该 <code>@</code> 符号作为分隔符读取的实例 <code>books_csv</code> 。 将结果保存到名为的变量中 <code>books_reader</code> 。</p><p><input id=\"readingdifferenttypesofcsvfiles\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong>创建一个名为的列表 <code>isbn_list</code> ，进行迭代 <code>books_reader</code> 以获取CSV文件中每本书的ISBN号。将 <code>['ISBN']</code> 密钥用于传递给它的字典对象。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import csv\n\nwith open('books.csv') as books_csv:\n  books_reader = csv.DictReader(books_csv, delimiter='@')\n  isbn_list = [book['ISBN'] for book in books_reader]</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingdifferenttypesofcsvfiles\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"writingacsvfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingacsvfile\" goals=\"next-0\"><h2>编写CSV文件</h2><p>自然，如果我们有能力读取不同的CSV文件，我们可能希望能够以编程方式创建CSV文件，以保存可以加载到电子表格软件中的输出和数据。假设我们有一大堆数据要保存到CSV文件中。我们可以执行以下操作：</p><pre class=\"language-python\"><code>big_list = [\n    {'name': 'Fredrick Stein', 'userid': 6712359021, 'is_admin': False},\n    {'name': 'Wiltmore Denis', 'userid': 2525942, 'is_admin': False}, \n    {'name': 'Greely Plonk', 'userid': 15890235, 'is_admin': False},\n    {'name': 'Dendris Stulo', 'userid': 572189563, 'is_admin': True}\n] \n\nimport csv\n\nwith open('output.csv', 'w') as output_csv:\n  fields = ['name', 'userid', 'is_admin']\n  output_writer = csv.DictWriter(output_csv, fieldnames=fields)\n\n  output_writer.writeheader()\n  for item in big_list:\n    output_writer.writerow(item)</code></pre><p>在上面的代码中，我们有一组字典，每个字典具有相同的键，是CSV的主要候选对象。我们导入 <code>csv</code> 库，然后通过将 <code>'w'</code> 参数传递给函数以写入模式打开新的CSV文件 <code>open()</code> 。</p><p>然后，我们将要使用的字段定义为称为的变量 <code>fields</code> 。 然后，我们实例化CSV编写器对象并传递两个参数。第一个是 <code>output_csv</code> ，文件处理程序对象。第二个是 <code>fields</code> 我们传递给关键字parameter 的字段列表 <code>fieldnames</code> 。</p><p>现在，我们已经实例化了CSV文件编写器，我们可以开始向文件本身添加行了！首先，我们需要标题，因此我们调用 <code>.writeheader()</code> writer对象。这会将传递到的所有字段写 <code>fieldnames</code> 为文件中的第一行。然后，我们遍历 <code>big_list</code> 数据。每个 <code>item</code> 输入 <code>big_list</code> 是一个字典，每个输入字段 <code>fields</code> 作为键。我们 <code>output_writer.writerow()</code> 用 <code>item</code> 字典来调用，字典将每一行写入CSV文件。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong>我们在工作区 <code>access_log</code> 中有一个列表，它是我们要写到CSV文件的词典的列表。</p><p>让我们从导入 <code>csv</code> 模块开始。</p><p><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>在临时变量 <code>logger_csv</code> 中打开文件<strong>logger.csv</strong>。 不要忘记以写入模式打开文件。</p><p><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>创建一个 <code>csv.DictWriter</code> 名为的实例 <code>log_writer</code> 。 作为第一个参数传递 <code>logger_csv</code> ，然后 <code>fields</code> 作为关键字参数传递给keyword <code>fieldnames</code> 。</p><p><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong>使用方法写入标题。 <code>log_writer</code> . <code>.writeheader()</code></p><p><input id=\"writingacsvfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>5.</strong>遍历 <code>access_log</code> 列表，然后使用将每个元素添加到CSV <code>log_writer.writerow()</code> 。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">access_log = [{'time': '08:39:37', 'limit': 844404, 'address': '1.227.124.181'}, {'time': '13:13:35', 'limit': 543871, 'address': '198.51.139.193'}, {'time': '19:40:45', 'limit': 3021, 'address': '172.1.254.208'}, {'time': '18:57:16', 'limit': 67031769, 'address': '172.58.247.219'}, {'time': '21:17:13', 'limit': 9083, 'address': '124.144.20.113'}, {'time': '23:34:17', 'limit': 65913, 'address': '203.236.149.220'}, {'time': '13:58:05', 'limit': 1541474, 'address': '192.52.206.76'}, {'time': '10:52:00', 'limit': 11465607, 'address': '104.47.149.93'}, {'time': '14:56:12', 'limit': 109, 'address': '192.31.185.7'}, {'time': '18:56:35', 'limit': 6207, 'address': '2.228.164.197'}]\nfields = ['time', 'address', 'limit']\n\nimport csv\n\nwith open('logger.csv', 'w') as logger_csv:\n  log_writer = csv.DictWriter(logger_csv, fieldnames=fields)\n  log_writer.writeheader()\n  for line in access_log:\n    log_writer.writerow(line)\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingacsvfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"readingajsonfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"readingajsonfile\" goals=\"next-0\"><h2>读取JSON文件</h2><p>CSV不是Python具有内置库的唯一文件格式。我们还可以使用Python的文件工具来读取和写入JSON。JSON是JavaScript Object Notation的缩写，是一种受编程语言JavaScript启发的文件格式。像CSV这样的名称有点用词不当-一些JSON无效的JavaScript（很多JavaScript无效的JSON）。</p><p>JSON的格式与Python字典语法非常相似，因此从Python开发人员的角度来看，JSON文件可能易于读取。尽管如此，Python附带了一个json软件包，该软件包将帮助我们将JSON文件解析为实际的Python字典。假设我们有一个如下所示的JSON文件：</p><p><strong>purchase_14781239.json</strong></p><pre class=\"language-json\"><code>'{\n  \"user\": \"ellen_greg\",\n  \"action\": \"purchase\",\n  \"item_id\": 14781239,\n}'</code></pre><p>我们可以使用以下代码将其作为Python字典阅读：</p><p><strong>json_reader.py</strong></p><pre class=\"language-python\"><code>import json\n\nwith open('purchase_14781239.json') as purchase_json:\n  purchase_data = json.load(purchase_json)\n\nprint(purchase_data['user'])\n# Prints 'ellen_greg'</code></pre><p>首先，我们导入 <code>json</code> 包。我们使用trusty <code>open()</code> 命令打开了文件。由于我们以读取模式打开它，因此我们只需要传递文件名即可。我们将文件保存在临时变量中 <code>purchase_json</code> 。</p><p>我们继续 <code>purchase_json</code> 使用进行解析 <code>json.load()</code> ，从文件中创建一个Python字典。将结果保存为 <code>purchase_data</code> 意味着我们可以与之交互。通过键入 <code>purchase_data</code> 对象，可以打印出JSON文件的值之一。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 让我们阅读一个JSON文件！首先导入 <code>json</code> 模块。</p><p>使用以下命令导入JSON库：</p><pre class=\"language-python\"><code>import json</code></pre><p><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong> 打开文件<strong>message.json</strong>，将文件对象保存到变量中 <code>message_json</code> 。</p><p>以读取模式打开文件，而无需将任何其他参数传递给 <code>open()</code> 。</p><p>记住打开文件的语法：</p><pre class=\"language-python\"><code>with open('file.json') as file_json:\n  pass</code></pre><p><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong> </p><p>将JSON文件对象作为参数传递给 <code>json.load()</code> ，并将生成的Python字典另存为 <code>message</code> 。</p><p><input id=\"readingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong> 打印输出 <code>message['text']</code> 。</p></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">import json\n\nwith open('message.json') as message_json:\n  message = json.load(message_json)\n  print(message['text'])</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=readingajsonfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"writingajsonfile","section":"interactivelesson","goals":["next-0"],"html":"<x-step id=\"writingajsonfile\" goals=\"next-0\"><h2>编写JSON文件</h2><p>当然，我们也可以使用该 <code>json</code> 库将Python对象转换为JSON。在使用Python库提供网页服务的实例中，这也特别有用。假设我们有一个Python字典要保存为JSON文件：</p><pre class=\"language-python\"><code>turn_to_json = {\n  'eventId': 674189,\n  'dateTime': '2015-02-12T09:23:17.511Z',\n  'chocolate': 'Semi-sweet Dark',\n  'isTomatoAFruit': True\n}</code></pre><p>通过执行以下操作，我们将能够使用该信息创建JSON文件：</p><pre class=\"language-python\"><code>import json\n\nwith open('output.json', 'w') as json_file:\n  json.dump(turn_to_json, json_file)</code></pre><p>我们导入 <code>json</code> 模块，在变量下打开一个写模式文件 <code>json_file</code> ，然后使用该 <code>json.dump()</code> 方法写入文件。 <code>json.dump()</code> 有两个参数：首先是数据对象，然后是您要保存的文件对象。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>使用说明</strong></h4><p><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 在您的工作区中，我们放置了名为的字典 <code>data_payload</code> 。 我们要将其保存到名为<strong>data.json</strong>的文件中。</p><p>让我们从导入 <code>json</code> 库开始。</p><p><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>在变量中打开一个新的文件对象 <code>data_json</code> 。 文件名应为 <code>'data.json'</code> 并且文件应以写模式打开。</p><p>记住要使用以下语法以写模式打开文件：</p><pre class=\"language-python\"><code>with open('file.json', 'w') as file_json:\n  pass</code></pre><p><input id=\"writingajsonfile\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>使用 <code>json.dump()</code> 与 <code>data_payload</code> 和 <code>data_json</code> 调用，将我们的数据转换为JSON，然后将其保存到文件<strong>data.json</strong>中。</p><p>使用 <code>json.dump()</code> 与文件对象作为第二个参数写入生成的JSON到文件中：</p><pre class=\"language-python\"><code>payload = {'message': 'OK'}\nwith open('file.json', 'w') as file_json:\n  json.dump(payload, file_json)</code></pre></div><div style=\"width: 680px\"> <div id=\"ide\"><pre class=\"initcode\">data_payload = [\n  {'interesting message': 'What is JSON? A web application\\'s little pile of secrets.',\n   'follow up': 'But enough talk!'}\n]\n\nimport json\n\nwith open('data.json', 'w') as data_json:\n  json.dump(data_payload, data_json)</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=writingajsonfile\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"review","section":"interactivelesson","goals":[],"html":"<x-step id=\"review\" goals=\"\"><h2>评论</h2><p>现在，您对文件了如指掌！您能够：</p><div class=\"row padded\"><div class=\"grow\"> <ul> <li>使用 <code>open()</code> 和打开文件对象 <code>with</code> 。</li><li>使用Python的 <code>.read()</code> 方法读取文件的全部内容。</li><li>使用 <code>.readline()</code>()_ 和逐行读取文件() <code>.readlines()</code> 。</li><li>通过以写模式打开它们来创建新文件。</li><li>通过以附加模式打开文件，以非破坏性方式附加到文件。</li><li>将以上所有内容应用于不同类型的数据传输文件，包括CSV和JSON！</li></ul> </div><div style=\"width: 640px\"> <div id=\"ide\"><pre class=\"initcode\">with open('file.txt') as file_object:\n  print(file_object.read())\n</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=review\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p>您拥有以编程方式读取，写入和更新文件所需的所有技能，这是Python领域中非常有用的技能！</p></x-step>"},{"section":"multiplechoicequiz","id":"step-14","goals":[],"html":"<x-step id=\"step-14\" goals=\"\"></x-step>"},{"id":"multiplechoicequiz","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"multiplechoicequiz\" goals=\"next-0\"><p>有哪些不同的模式（作为参数传递给open（）函数）用于在Python中打开文件？</p><p>json.load</p><p>csv.DictReader</p><p>csv.DictWriter</p><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-16","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-16\" goals=\"next-0\"><p>有哪些不同的模式（作为参数传递给open（）函数）用于在Python中打开文件？</p><p>读模式（“ r”，默认模式），写模式（“ w”）和追加模式（“ a”）。</p><p>读取模式（“ r”，默认模式），删除模式（“ d”）和更新模式（“ u”）。</p><p>读模式（“ r”，默认模式），写模式（“ w”）和更新模式（“ u”）。</p><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-17","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-17\" goals=\"next-0\"><p>with命令在Python中有什么作用？</p><p>导入新模块供代码编写者使用。</p><p>以读取模式打开文件。</p><p>创建一个上下文管理器，在退出相邻的缩进块后执行清除。</p><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-18","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-18\" goals=\"next-0\"><p>以下哪项在Python中打开文件？</p><pre class=\"language-python\"><code>with open('file1.txt') as file_obj:\n  pass</code></pre><pre class=\"language-python\"><code>with open(file.txt) as file_obj:\n  pass</code></pre><pre class=\"language-python\"><code>with file_obj = open('file.txt'):\n  pass</code></pre><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-19","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-19\" goals=\"next-0\"><p>文件对象（称为file_object）上的以下哪种方法读取文件的内容并将其作为字符串返回？</p><pre class=\"language-python\"><code>file_contents = file_object.read()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.get()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.readlines()</code></pre><pre class=\"language-python\"><code>file_contents = file_object.readline()</code></pre><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-20","section":"multiplechoicequiz","goals":["next-0"],"html":"<x-step id=\"step-20\" goals=\"next-0\"><p>哪种方法从名为file_object的文件对象变量中读取一行？</p><p>file_object.read()</p><p>file_object.readlines()</p><p>file_object.readline()</p><p><button class=\"next-step\">继续</button></p></x-step>"},{"id":"step-21","section":"multiplechoicequiz","goals":[],"html":"<x-step id=\"step-21\" goals=\"\"><p>您将使用什么函数将Python数据呈现为JSON文件？</p><p>json.write()</p><p>json.dump()</p><p>json.writelines()</p></x-step>"},{"section":"freeformproject","id":"step-22","goals":[],"html":"<x-step id=\"step-22\" goals=\"\"></x-step>"},{"id":"freeformproject","section":"freeformproject","goals":[],"html":"<x-step id=\"freeformproject\" goals=\"\"><h2>小试牛刀</h2><p> <code>The Fender</code> ，臭名昭著的计算机黑客和人民的恶棍，已经破坏了包括您自己在内的几个绝密密码。您的任务（如果您选择接受）是三重的。您必须获得对 <code>The Fender</code> 的系统的访问权，您必须更新其 <code>\"passwords.txt\"</code> 文件以加密秘密数据。您需要做的最后一件事是添加的签名 <code>Slash Null</code> ，这是另一位黑客， <code>The Fender</code> 如果他们将恶意行为视为 <code>Slash Null</code> 威胁，可以很方便地制止其恶行。</p><p>利用您对Python文件的了解来检索，操纵，遮掩和创建数据，以寻求正义。在探索Python文件编程强度的过程中，可以使用CSV文件和其他文本文件。</p><p>如果您在此项目中遇到麻烦，请查看帮助菜单中的<strong>项目演练视频</strong>。</p><div class=\"row padded\"><div class=\"grow\"> <h4><strong>任务</strong></h4><p>选中任务以将其标记为完成</p><h4>读取密码</h4><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>1.</strong> 你在吗？我们已经打开了 <code>The Fender</code> 与秘密计算机的通信链接。我们需要您编写一个程序，以读取存储在名为的文件中的受损用户名和密码 <code>\"passwords.csv\"</code> 。</p><p>首先导入CSV模块，因为我们将需要它来解析数据。</p><p>您可以使用以下语法导入CSV模块：</p><pre class=\"language-python\"><code>import csv</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>2.</strong>我们需要创建一个密码被泄露的用户列表，创建一个新列表并将其保存到变量中 <code>compromised_users</code> 。</p><p>为 <code>new_list</code> 使用以下语法调用的变量创建新列表：</p><pre class=\"language-python\"><code>new_list = []</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>3.</strong>接下来，我们需要您打开文件本身。将其存储在名为的文件对象中 <code>password_file</code> 。</p><p>使用 <code>with...as</code> 语法打开文件，请记住该文件以缩进块开头：</p><pre class=\"language-python\"><code>with open('filename.txt') as file_object:\n  # pass</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>4.</strong>将 <code>password_file</code> 对象持有人传递给我们的CSV阅读器进行解析。将已解析的 <code>csv.DictReader</code> 对象另存为 <code>password_csv</code> 。</p><pre class=\"language-python\"><code>parsed_csv = csv.DictReader(file_object)</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>5.</strong>现在，我们要遍历CSV中的每一行。</p><p>创建一个for循环并将CSV的每一行保存到临时变量中 <code>password_row</code> 。 Now we’ll want to iterate through each of the lines in the CSV.</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>6.</strong>在 <code>for</code> 循环中，打印出 <code>password_row['Username']</code> 。 这是密码被泄露的人的用户名。 运行您的代码，您是否看到用户名列表？ </p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>7.</strong> 删除该 <code>print</code> 语句。我们要将每个用户名添加到的列表中 <code>compromised_users</code> 。 使用列表的 <code>.append()</code> 方法将用户名添加到， <code>compromised_users</code> 而不是打印它们。</p><p>列表的 <code>.append()</code> 方法将其添加到列表中。</p><pre class=\"language-python\"><code>my_list.append(my_dict['Key'])</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>8.</strong>退出你的了 <code>with</code> 块 <code>\"passwords.csv\"</code> 。 我们拥有该文件中所需的所有数据。</p><p>开始一个新 <code>with</code> 块，打开一个名为的文件 <code>compromised_users.txt</code> 。 以写模式打开此文件，将文件对象另存为 <code>compromised_user_file</code> 。</p><p>您可以通过将 <code>\"w\"</code> 参数作为传递给以写入模式打开文件 _{code}open()_。</p><pre class=\"language-python\"><code>with open('new_file.txt', 'w') as new_file:\n  # write to file here</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>9.</strong> 在该 <code>with</code> 语句打开的新的上下文管理块内，启动一个新 <code>for</code> 循环。 遍历每个 <code>compromised_users</code> 。</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>10.</strong>写入每个的用户名 <code>compromised_user</code> 中 <code>compromised_users</code> ，以 <code>compromised_user_file</code> 。</p><p>使用文件对象的 <code>.write()</code> 方法： </p><pre class=\"language-python\"><code>write_me = \"write me to file\"\nwith open('file.txt', 'w') as file_obj:\n  file_obj.write(write_me)</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>11.</strong>退出该 <code>with</code> 街区。到目前为止，您的表现很棒！我们已经掌握了需要作为保障的数据 <code>The Fender</code> 。</p><h4>通知老板</h4><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>12.</strong>您的老板需要知道您已成功检索了这些受损的数据。我们需要通过互联网向他发送编码消息。让我们使用JSON来做到这一点。</p><p>首先，我们需要导入 <code>json</code> 模块。</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>13.</strong>在名为的写入模式下打开一个新的JSON文件 <code>boss_message.json</code> 。 将文件对象保存到变量 <code>boss_message</code> 。</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>14.</strong>在您的 <code>with</code> 语句中创建一个Python词典对象，以中继上司消息。叫这个 <code>boss_message_dict</code> 。</p><p>给它一个 <code>\"recipient\"</code> 带值的钥匙 <code>\"The Boss\"</code> 。</p><p>还给它一个 <code>\"message\"</code> 带有值的密钥 <code>\"Mission Success\"</code> 。</p><p>使用花括号 <code>{</code> 和定义Python字典 <code>}</code> ：</p><pre class=\"language-python\"><code>new_dict = {\n  'key1': 'val1',\n  'key2': 'val2'\n}</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>15.</strong> 写出来 <code>boss_message_dict</code> 给 <code>boss_message</code> 使用 <code>json.dump()</code> 。 <code>json.dump()</code> 接受两个参数：一个Python数据对象（如字典或数组）和一个文件对象，用于将生成的JSON写入其中。 传递两个参数， <code>json.dump()</code> 例如：</p><pre class=\"language-python\"><code>json.dump(dict_obj, file_obj)</code></pre><h4>加密密码</h4><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>16.</strong>现在我们已经安全地恢复了受到感染的用户，我们将要 <code>\"passwords.csv\"</code> 完全删除该文件。</p><p>创建一个新 <code>with</code> 块并 <code>\"new_passwords.csv\"</code> 以写模式打开。将文件对象保存到名为的变量中 <code>new_passwords_obj</code> 。</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>17.</strong> 人民公敌， <code>Slash Null</code> ，是我们想要谁 <code>The Fender</code> 想到是这种攻击的背后。他有一个签名，每当他入侵某人时，便将此签名添加到他触摸的文件之一中。这是签名：</p><pre class=\"language-python\"><code> _  _     ___   __  ____             \n/ )( \\   / __) /  \\(_  _)            \n) \\/ (  ( (_ \\(  O ) )(              \n\\____/   \\___/ \\__/ (__)             \n _  _   __    ___  __ _  ____  ____  \n/ )( \\ / _\\  / __)(  / )(  __)(    \\ \n) __ (/    \\( (__  )  (  ) _)  ) D ( \n\\_)(_/\\_/\\_/ \\___)(__\\_)(____)(____/ \n        ____  __     __   ____  _  _ \n ___   / ___)(  )   / _\\ / ___)/ )( \\\n(___)  \\___ \\/ (_/\\/    \\\\___ \\) __ (\n       (____/\\____/\\_/\\_/(____/\\_)(_/\n __ _  _  _  __    __                \n(  ( \\/ )( \\(  )  (  )               \n/    /) \\/ (/ (_/\\/ (_/\\             \n\\_)__)\\____/\\____/\\____/</code></pre><p>将其另存为多行字符串到变量中 <code>slash_null_sig</code> 。</p><p>请记住，您可以使用三个引号开头多行字符串：</p><pre class=\"language-python\"><code>multiline_str = \"\"\"\n  ___  __    __   __   \n / __)/  \\  /  \\ (  )  \n( (__(  O )(  O )/ (_/\\\n \\___)\\__/  \\__/ \\____/\n\"\"\"</code></pre><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>18.</strong> 写信 <code>slash_null_sig</code> 给 <code>new_passwords_obj</code> 。 现在我们有了替换文件 <code>passwords.csv</code> ！</p><p><input id=\"freeformproject\" type=\"checkbox\" disabled=\"disabled\"> <strong>19.</strong>多么令人难以置信的成功！如果您 <code>The Fender</code> 将来想练习黑客，我们将把新密码文件移到旧密码文件上。</p></div><div style=\"width: 640px\"> <div id=\"ide\"><pre class=\"initcode\">print(a);</pre><iframe src=\"http://114.116.82.25:7000/#/exercise?id=freeformproject\" scrolling=\"no\" style=\"width: 100%; height: 500px; border: none;\"></iframe></div></div></div> <p>谢谢您的服务，程序员。</p></x-step>"}],"goals":18,"title":"文件"}