{"sections":[{"id":"interactive-lesson","title":"Interactive lesson","status":"","background":"","goals":14,"duration":65,"steps":["interactive-lesson","welcome","comments1","print46","strings1","variables1","step-6","step-7","step-8","step-9","step-10","step-11","step-12","step-13","step-14","step-15"]},{"id":"freeform-project","title":"Freeform Project","status":"","background":"","goals":0,"duration":15,"steps":["step-16","step-17"]},{"id":"multiple-quiz","title":"Multiple Quiz","status":"","background":"","goals":0,"duration":5,"steps":["step-18","step-19","step-20"]},{"id":"user-input-article","title":"User Input Article","status":"","background":"","goals":0,"duration":10,"steps":["step-21"]}],"steps":[{"stage":"Foundations","description":"LEARN PYTHON: SYNTAX","section":"interactive-lesson","id":"interactive-lesson","goals":[],"html":"<x-step id=\"interactive-lesson\" goals=\"\"></x-step>"},{"section":"interactive-lesson","id":"welcome","goals":["next-0"],"html":"<x-step id=\"welcome\" goals=\"next-0\"><h2>Welcome</h2><p><span class=\"sentence\"><span class=\"math\" data-voice=\"yy pp\"><msub><mi>yy</mi><mi>pp</mi></msub></span></span></p><p><span class=\"sentence\"><em class=\"code\">yy_pp</em></span></p><p class=\"code\"><span class=\"sentence\">yy_pp M</span></p><p><span class=\"sentence\">Python is a programming language. </span><span class=\"sentence\">Like other languages, it gives us a way to communicate ideas. </span><span class=\"sentence\">In the case of a programming language, these ideas are “commands” that people use to communicate with a computer!</span></p><p><span class=\"sentence\">We convey our commands to the computer by writing them in a text file using a programming language. </span><span class=\"sentence\">These files are called <strong>programs</strong>. </span><span class=\"sentence\">Running a program means telling a computer to read the text file, translate it to the set of operations that it understands, and perform those actions.</span></p><h4>Instructions</h4><p><span class=\"sentence\">Change <span class=\"math\" data-voice=\"Camluni\"><mi>Camluni</mi></span> to your name in the script to the right. </span><span class=\"sentence\">Run the code to see what it does! </span><span class=\"sentence\">As soon as you’re ready, move on to the next exercise to begin learning to write your own Python programs!</span></p><div id=\"ide\"><pre class=\"initcode\">my_name = \"Camluni\"\nprint(\"Hello and welcome \" + my_name + \"!\")</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%;height: 500px; border: none;\"></iframe></div><p><span class=\"sentence\">Concept Review</span></p><p><span class=\"sentence\">Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's <a href=\"https://www.codecademy.com/learn/learn-python-3/modules/learn-python3-syntax/cheatsheet\" target=\"_blank\">cheatsheet!</a></span></p><p><span class=\"sentence\">Community Forums</span></p><p><span class=\"sentence\">Here are some helpful links to the top questions asked by coders about this exercise:</span></p><ol> <li><span class=\"sentence\"><p><span class=\"sentence\">Why do I need to enter my name on a different line?</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">How can I use an integer in a print function?</span></p></span></li></ol> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"section":"interactive-lesson","id":"comments1","goals":["next-0"],"html":"<x-step id=\"comments1\" goals=\"next-0\"><h2>Comments</h2><p><span class=\"sentence\">Ironically, the first thing we’re going to do is show how to tell a computer to ignore a part of a program. </span><span class=\"sentence\">Text written in a program but not run by the computer is called a comment. </span><span class=\"sentence\">Python interprets anything after a # as a comment.</span></p><div id=\"ide\"><pre class=\"initcode\"># This variable will be used to count the number of times anyone tweets the word persnickety\npersnickety_count = 0</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%;height: 500px; border: none;\"></iframe></div><p><span class=\"sentence\">Comments can:</span></p><ul> <li><span class=\"sentence\">Provide context for why something is written the way it is:</span></li></ul> <pre class=\"language-python\"><code># This variable will be used to count the number of times anyone tweets the \nword persnickety\npersnickety_count = 0</code></pre><ul> <li><span class=\"sentence\">Help other people reading the code understand it faster:</span></li></ul> <pre class=\"language-python\"><code># This code will calculate the likelihood that it will rain tomorrow\ncomplicated_rain_calculation_for_tomorrow()</code></pre><ul> <li><span class=\"sentence\">Ignore a line of code and see how a program will run without it:</span></li></ul> <pre class=\"language-python\"><code># useful_value = old_sloppy_code()\nuseful_value = new_clean_code()</code></pre><h4>Instructions</h4><p><span class=\"sentence\">[x] 1. </span><span class=\"sentence\">Documentation is an important step in programming. </span><span class=\"sentence\">Write a comment describing the first program you want to write!</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Here are some helpful links to the top questions asked by coders about this exercise:</span></p><p><span class=\"sentence\">In the context of this exercise that introduces comments, where should comments be added to the code? </span><span class=\"sentence\">Can I just add comments to every line of code to be safe? </span><span class=\"sentence\">Why is there no output in the terminal? </span><span class=\"sentence\">How to make multiline comments, and autocompletion of quotes Still have questions? </span><span class=\"sentence\">View this exercise's thread in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"print46","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"print46\" goals=\"next-0\"><h2>Print</h2><p><span class=\"sentence\">Now what we’re going to do is teach our computer to communicate. </span><span class=\"sentence\">The gift of speech is valuable: </span><span class=\"sentence\">a computer can answer many questions we have about “how” or “why” or “what” it is doing. </span><span class=\"sentence\">In Python, the print() function is used to tell a computer to talk. </span><span class=\"sentence\">The message to be printed should be surrounded by quotes:</span></p><div id=\"ide\"><pre class=\"initcode\"># from Mary Shelley's Frankenstein\nprint(\"There is something at work in my soul, which I do not understand.\")</pre><iframe src=\"http://114.116.82.25:7000/\" scrolling=\"no\" style=\"width: 100%;height: 500px; border: none;\"></iframe></div><pre class=\"language-python\"><code># from Mary Shelley's Frankenstein\nprint(\"There is something at work in my soul, which I do not understand.\")</code></pre><p><span class=\"sentence\">In the above example, we direct our program to print() an excerpt from a notable book. </span><span class=\"sentence\">The printed words that appear as a result of the print() function are referred to as output. </span><span class=\"sentence\">The output of this example program would be:</span></p><pre class=\"language-python\"><code>There is something at work in my soul, which I do not understand.</code></pre><h4>Instructions</h4><p><span class=\"sentence\">1. </span><span class=\"sentence\">Print the distinguished greeting “Hello world!”</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Here are some helpful links to the top questions asked by coders about this exercise:</span></p><p><span class=\"sentence\">Are quotes always necessary inside of a print() ? </span><span class=\"sentence\">How can I use quotes inside of a string? </span><span class=\"sentence\">How can I skip or jump to a new line while printing? </span><span class=\"sentence\">Still have questions? </span><span class=\"sentence\">View this exercise's thread in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"strings1","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"strings1\" goals=\"next-0\"><h2>Strings</h2><p><span class=\"sentence\">Computer programmers refer to blocks of text as strings. </span><span class=\"sentence\">In our last exercise, we created the string “Hello world!”. </span><span class=\"sentence\">In Python a string is either surrounded by double quotes (\"Hello world\") or single quotes ('Hello world'). </span><span class=\"sentence\">It doesn’t matter which kind you use, just be consistent.</span></p><ul> <li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> Instructions</span></li><li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> 1. </span><span class=\"sentence\">Print your name using the print() command.</span></li></ul> <ul> <li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> Stuck? </span><span class=\"sentence\">Get a hint</span></li><li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> 2. </span><span class=\"sentence\">If your print statement uses double-quotes \", change them to single-quotes '. </span><span class=\"sentence\">If it uses single-quotes ', change them to double-quotes \".</span></li></ul> <p><span class=\"sentence\">Try running your code again after switching the type of quote-marks. </span><span class=\"sentence\">Is anything different about the output?</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"id":"variables1","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"variables1\" goals=\"next-0\"><h2>Variables</h2><p><span class=\"sentence\">Programming languages offer a method of storing data for reuse. </span><span class=\"sentence\">If there is a greeting we want to present, a date we need to reuse, or a user ID we need to remember we can create a variable which can store a value. </span><span class=\"sentence\">In Python, we assign variables by using the equals sign (=).</span></p><pre class=\"language-python\"><code>message_string = \"Hello there\"\n# Prints \"Hello there\"\nprint(message_string)</code></pre><p><span class=\"sentence\">In the above example, we store the message “Hello there” in a variable called message_string. </span><span class=\"sentence\">Variables can’t have spaces or symbols in their names other than an underscore (_). </span><span class=\"sentence\">They can’t begin with numbers but they can have numbers after the first letter (e.g., cool_variable_5 is OK).</span></p><p><span class=\"sentence\">It’s no coincidence we call these creatures “variables”. </span><span class=\"sentence\">If the context of a program changes, we can update a variable but perform the same logical process on it.</span></p><pre class=\"language-python\"><code># Greeting\nmessage_string = \"Hello there\"\nprint(message_string)</code></pre><pre class=\"language-python\"><code># Farewell\nmessage_string = \"Hasta la vista\"\nprint(message_string)</code></pre><p><span class=\"sentence\">Above, we create the variable message_string, assign a welcome message, and print the greeting. </span><span class=\"sentence\">After we greet the user, we want to wish them goodbye. </span><span class=\"sentence\">We then update message_string to a departure message and print that out.</span></p><ul> <li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> Instructions</span></li><li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> 1. </span><span class=\"sentence\">Update the variable meal to reflect each meal of the day before we print it.</span></li></ul> <p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"e","4":"r","5":"r","6":"o","7":"r","8":"s","9":"1","id":"step-6","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-6\" goals=\"next-0\"><h2>Errors</h2><p><span class=\"sentence\">Humans are prone to making mistakes. </span><span class=\"sentence\">Humans are also typically in charge of creating computer programs. </span><span class=\"sentence\">To compensate, programming languages attempt to understand and explain mistakes made in their programs.</span></p><p><span class=\"sentence\">Python refers to these mistakes as errors and will point to the location where an error occurred with a ^ character. </span><span class=\"sentence\">When programs throw errors that we didn’t expect to encounter we call those errors bugs. </span><span class=\"sentence\">Programmers call the process of updating the program so that it no longer produces unexpected errors debugging.</span></p><p><span class=\"sentence\">Two common errors that we encounter while writing Python are SyntaxError and NameError.</span></p><ul> <li><span class=\"sentence\"><p><span class=\"sentence\">SyntaxError means there is something wrong with the way your program is written — punctuation that does not belong, a command where it is not expected, or a missing parenthesis can all trigger a SyntaxError.</span></p></span></li><li><span class=\"sentence\"><p><span class=\"sentence\">A NameError occurs when the Python interpreter sees a word it does not recognize. </span><span class=\"sentence\">Code that contains something that looks like a variable but was never defined will throw a NameError.</span></p></span></li><li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p><span class=\"sentence\">Instructions</span></p></span></li><li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p><span class=\"sentence\">1. </span><span class=\"sentence\">You might encounter a SyntaxError if you open a string with double quotes and end it with a single quote. </span><span class=\"sentence\">Update the string so that it starts and ends with the same punctuation.</span></p></span></li></ul> <p><span class=\"sentence\">You might encounter a NameError if you try to print a single word string but fail to put any quotes around it. </span><span class=\"sentence\">Python expects the word of your string to be defined elsewhere but can’t find where it’s defined. </span><span class=\"sentence\">Add quotes to either side of the string to squash this bug.</span></p><p><span class=\"sentence\">Update the malformed strings in the workspace to all be strings.</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"n","4":"u","5":"m","6":"b","7":"e","8":"r","9":"s","id":"step-7","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-7\" goals=\"next-0\"><h2>Numbers</h2><p><span class=\"sentence\">Computers can understand much more than just strings of text. </span><span class=\"sentence\">Python has a few numeric data types. </span><span class=\"sentence\">It has multiple ways of storing numbers. </span><span class=\"sentence\">Which one you use depends on your intended purpose for the number you are saving.</span></p><p><span class=\"sentence\">An integer, or int, is a whole number. </span><span class=\"sentence\">It has no decimal point and contains all counting numbers (1, 2, 3, …) as well as their negative counterparts and the number 0. </span><span class=\"sentence\">If you were counting the number of people in a room, the number of jellybeans in a jar, or the number of keys on a keyboard you would likely use an integer.</span></p><p><span class=\"sentence\">A floating-point number, or a float, is a decimal number. </span><span class=\"sentence\">It can be used to represent fractional quantities as well as precise measurements. </span><span class=\"sentence\">If you were measuring the length of your bedroom wall, calculating the average test score of a seventh-grade class, or storing a baseball player’s batting average for the 1998 season you would likely use a float.</span></p><p><span class=\"sentence\">Numbers can be assigned to variables or used literally in a program:</span></p><pre class=\"language-python\"><code>an_int = 2\na_float = 2.1\n\nprint(an_int + 3)\n# prints 5</code></pre><p><span class=\"sentence\">Above we defined an integer and a float as the variables an_int and a_float. </span><span class=\"sentence\">We printed out the sum of the variable an_int with the number 3. </span><span class=\"sentence\">We call the number 3 here a literal, meaning it’s actually the number 3 and not a variable with the number 3 assigned to it.</span></p><p><span class=\"sentence\">Floating-point numbers can behave in some unexpected ways due to how computers store them. </span><span class=\"sentence\">For more information on floating-point numbers and Python, review Python’s documentation on floating-point limitations.</span></p><ul> <li><span class=\"sentence\"><input checked=\"\" disabled=\"\" type=\"checkbox\"> Instructions</span></li><li><span class=\"sentence\">[x]1. </span><span class=\"sentence\">A recent movie-going experience has you excited to publish a review. </span><span class=\"sentence\">You rush out of the cinema and hastily begin programming to create your movie-review website: </span><span class=\"sentence\">The Big Screen’s Greatest Scenes Decided By A Machine.</span></li></ul> <p><span class=\"sentence\">Create the following variables and assign integer numbers to them: </span><span class=\"sentence\">release_year and runtime.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 2. </span><span class=\"sentence\">Now, create the variable rating_out_of_10 and assign it a float number between one and ten.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"c","4":"a","5":"l","6":"c","7":"u","8":"l","9":"a","10":"t","11":"i","12":"o","13":"n","14":"s","id":"step-8","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-8\" goals=\"next-0\"><h2>Calculations</h2><p><span class=\"sentence\">Computers absolutely excel at performing calculations. </span><span class=\"sentence\">The “compute” in their name comes from their historical association with providing answers to mathematical questions. </span><span class=\"sentence\">Python performs addition, subtraction, multiplication, and division with +, -, *, and /.</span></p><pre class=\"language-python\"><code># Prints \"500\"\nprint(573 - 74 + 1)\n\n# Prints \"50\"\nprint(25 * 2)\n\n# Prints \"2.0\"\nprint(10 / 5)</code></pre><p><span class=\"sentence\">Notice that when we perform division, the result has a decimal place. </span><span class=\"sentence\">This is because Python converts all ints to floats before performing division. </span><span class=\"sentence\">In older versions of Python (2.7 and earlier) this conversion did not happen, and integer division would always round down to the nearest integer.</span></p><p><span class=\"sentence\">Division can throw its own special error: </span><span class=\"sentence\">ZeroDivisionError. </span><span class=\"sentence\">Python will raise this error when attempting to divide by 0.</span></p><p><span class=\"sentence\">Mathematical operations in Python follow the standard mathematical order of operations.</span></p><p><span class=\"sentence\">-[x] Instructions -[x]1.Print out the result of this equation: </span><span class=\"sentence\">25 * 68 + 13 / 28</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"c","4":"h","5":"a","6":"n","7":"g","8":"i","9":"n","10":"g","11":"N","12":"O","id":"step-9","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-9\" goals=\"next-0\"><h2>Changing Numbers</h2><p><span class=\"sentence\">Variables that are assigned numeric values can be treated the same as the numbers themselves. </span><span class=\"sentence\">Two variables can be added together, divided by 2, and multiplied by a third variable without Python distinguishing between the variables and literals (like the number 2 in this example). </span><span class=\"sentence\">Performing arithmetic on variables does not change the variable — you can only update a variable using the = sign.</span></p><pre class=\"language-python\"><code>coffee_price = 1.50\nnumber_of_coffees = 4\n\n# Prints \"6.0\"\nprint(coffee_price * number_of_coffees)\n# Prints \"1.5\"\nprint(coffee_price)\n# Prints \"4\"\nprint(number_of_coffees)\n\n# Updating the price \ncoffee_price = 2.00\n\n# Prints \"8.0\"\nprint(coffee_price * number_of_coffees)\n# Prints \"2.0\"\nprint(coffee_price)\n# Prints \"4\"\nprint(number_of_coffees)</code></pre><p><span class=\"sentence\">We create two variables and assign numeric values to them. </span><span class=\"sentence\">Then we perform a calculation on them. </span><span class=\"sentence\">This doesn’t update the variables! </span><span class=\"sentence\">When we update the coffee_price variable and perform the calculations again, they use the updated values for the variable!</span></p><p><span class=\"sentence\">-[x] Instructions -[x]1. </span><span class=\"sentence\">You’ve decided to get into quilting! </span><span class=\"sentence\">To calculate the number of squares you’ll need for your first quilt let’s create two variables: </span><span class=\"sentence\">quilt_width and quilt_length. </span><span class=\"sentence\">Let’s make this first quilt 8 squares wide and 12 squares long.</span></p><p><span class=\"sentence\">-[x]2. </span><span class=\"sentence\">Print out the number of squares you’ll need to create the quilt!</span></p><p><span class=\"sentence\">-[x]3. </span><span class=\"sentence\">It turns out that quilt required a little more material than you have on hand! </span><span class=\"sentence\">Let’s only make the quilt 8 squares long. </span><span class=\"sentence\">How many squares will you need for this quilt instead?</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"e","4":"x","5":"p","6":"o","7":"n","8":"e","9":"n","10":"t","11":"s","id":"step-10","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-10\" goals=\"next-0\"><h2>Exponents</h2><p><span class=\"sentence\">Python can also perform exponentiation. </span><span class=\"sentence\">In written math, you might see an exponent as a superscript number, but typing superscript numbers isn’t always easy on modern keyboards. </span><span class=\"sentence\">Since this operation is so related to multiplication, we use the notation **.</span></p><pre class=\"language-python\"><code># 2 to the 10th power, or 1024\nprint(2 ** 10)\n\n# 8 squared, or 64\nprint(8 ** 2)\n\n# 9 * 9 * 9, 9 cubed, or 729\nprint(9 ** 3)\n\n# We can even perform fractional exponents\n# 4 to the half power, or 2\nprint(4 ** 0.5)</code></pre><p><span class=\"sentence\">Here, we compute some simple exponents. </span><span class=\"sentence\">We calculate 2 to the 10th power, 8 to the 2nd power, 9 to the 3rd power, and 4 to the 0.5th power.</span></p><p><span class=\"sentence\">-[x]Instructions -[x]1. </span><span class=\"sentence\">You really like how the square quilts from last exercise came out, and decide that all quilts that you make will be square from now on.</span></p><p><span class=\"sentence\">Using the exponent operator, print out how many squares you’ll need for a 6x6 quilt, a 7x7 quilt, and an 8x8 quilt.</span></p><p><span class=\"sentence\">-[x]2. </span><span class=\"sentence\">Your 6x6 quilts have taken off so well, 6 people have each requested 6 quilts. </span><span class=\"sentence\">Print out how many tiles you would need to make 6 quilts apiece for 6 people.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums</span></p><ul> <li><span class=\"sentence\">Here are some helpful links to the top questions asked by coders about this exercise: </span><span class=\"sentence\">How many squares for 6 people who want 6 quilts of 6x6 squares? </span><span class=\"sentence\">Do spaces in python expressions do anything? </span><span class=\"sentence\">In this exercise, the exponent operator is used for positive exponents. </span><span class=\"sentence\">Does exponentiation work with negative exponents as well? </span><span class=\"sentence\">Still have questions? </span><span class=\"sentence\">View this exercise's thread in the Codecademy Forums.</span></li></ul> <p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"m","4":"o","5":"d","6":"u","7":"l","8":"o","id":"step-11","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-11\" goals=\"next-0\"><h2>Modulo</h2><p><span class=\"sentence\">Python offers a companion to the division operator called the modulo operator. </span><span class=\"sentence\">The modulo operator is indicated by % and gives the remainder of a division calculation. </span><span class=\"sentence\">If the number is divisible, then the result of the modulo operator will be 0.</span></p><pre class=\"language-python\"><code># Prints 4 because 29 / 5 is 5 with a remainder of 4\nprint(29 % 5)\n\n# Prints 2 because 32 / 3 is 10 with a remainder of 2\nprint(32 % 3)\n\n# Modulo by 2 returns 0 for even numbers and 1 for odd numbers\n# Prints 0\nprint(44 % 2)</code></pre><p><span class=\"sentence\">Here, we use the modulo operator to find the remainder of division operations. </span><span class=\"sentence\">We see that 29 % 5 equals 4, 32 % 3 equals 2, and 44 % 2 equals 0.</span></p><p><span class=\"sentence\">The modulo operator is useful in programming when we want to perform an action every nth-time the code is run. </span><span class=\"sentence\">Can the result of a modulo operation be larger than the divisor? </span><span class=\"sentence\">Why or why not?</span></p><p><span class=\"sentence\">[x]Instructions [x]1. </span><span class=\"sentence\">You’re trying to divide a group into four teams. </span><span class=\"sentence\">All of you count off, and you get number 27.</span></p><p><span class=\"sentence\">Find out your team by computing 27 modulo 4. </span><span class=\"sentence\">Save the value to my_team.</span></p><p><span class=\"sentence\">[x]2. </span><span class=\"sentence\">Print out my_team. </span><span class=\"sentence\">What number team are you on?</span></p><p><span class=\"sentence\">[x]3. </span><span class=\"sentence\">Food for thought: </span><span class=\"sentence\">what number team are the two people next to you (26 and 28) on? </span><span class=\"sentence\">What are the numbers for all 4 teams?</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"c","4":"o","5":"n","6":"c","7":"a","8":"t","9":"e","10":"n","11":"a","12":"t","13":"i","14":"o","15":"n","id":"step-12","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-12\" goals=\"next-0\"><h2>Concatenation</h2><p><span class=\"sentence\">The + operator doesn’t just add two numbers, it can also “add” two strings! </span><span class=\"sentence\">The process of combining two strings is called string concatenation. </span><span class=\"sentence\">Performing string concatenation creates a brand new string comprised of the first string’s contents followed by the second string’s contents (without any added space in-between).</span></p><pre class=\"language-python\"><code>greeting_text = \"Hey there!\"\nquestion_text = \"How are you doing?\"\nfull_text = greeting_text + question_text\n\n# Prints \"Hey there!How are you doing?\"\nprint(full_text)</code></pre><p><span class=\"sentence\">In this sample of code, we create two variables that hold strings and then concatenate them. </span><span class=\"sentence\">But we notice that the result was missing a space between the two, let’s add the space in-between using the same concatenation operator!</span></p><pre class=\"language-python\"><code>full_text = greeting_text + \" \" + question_text\n\n# Prints \"Hey there! How are you doing?\"\nprint(full_text)</code></pre><p><span class=\"sentence\">Now the code prints the message we expected.</span></p><p><span class=\"sentence\">If you want to concatenate a string with a number you will need to make the number a string first, using the str() function. </span><span class=\"sentence\">If you’re trying to print() a numeric variable you can use commas to pass it as a different argument rather than converting it to a string.</span></p><pre class=\"language-python\"><code>birthday_string = \"I am \"\nage = 10\nbirthday_string_2 = \" years old today!\"\n\n# Concatenating an integer with strings is possible if we turn the integer into a string first\nfull_birthday_string = birthday_string + str(age) + birthday_string_2\n\n# Prints \"I am 10 years old today!\"\nprint(full_birthday_string)\n\n# If we just want to print an integer \n# we can pass a variable as an argument to \n# print() regardless of whether \n# it is a string.\n\n# This also prints \"I am 10 years old today!\"\nprint(birthday_string, age, birthday_string_2)</code></pre><p><span class=\"sentence\">Using str() we can convert variables that are not strings to strings and then concatenate them. </span><span class=\"sentence\">But we don’t need to convert a number to a string for it to be an argument to a print statement.</span></p><p><span class=\"sentence\">[x]Instructions [x]1. </span><span class=\"sentence\">Concatenate the strings and save the message they form in the variable message.</span></p><p><span class=\"sentence\">Now uncomment the print statement and run your code to see the result in the terminal!</span></p><p><span class=\"sentence\">Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"p","4":"l","5":"u","6":"s","7":"e","8":"q","9":"u","10":"a","11":"l","12":"s","id":"step-13","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-13\" goals=\"next-0\"><h2>Plus Equals</h2><p><span class=\"sentence\">Python offers a shorthand for updating variables. </span><span class=\"sentence\">When you have a number saved in a variable and want to add to the current value of the variable, you can use the += (plus-equals) operator.</span></p><pre class=\"language-python\"><code># First we have a variable with a number saved\nnumber_of_miles_hiked = 12\n\n# Then we need to update that variable\n# Let's say we hike another two miles today\nnumber_of_miles_hiked += 2\n\n# The new value is the old value\n# Plus the number after the plus-equals\nprint(number_of_miles_hiked)\n# Prints 14</code></pre><p><span class=\"sentence\">Above, we keep a running count of the number of miles a person has gone hiking over time. </span><span class=\"sentence\">Instead of recalculating from the start, we keep a grand total and update it when we’ve gone hiking further.</span></p><p><span class=\"sentence\">The plus-equals operator also can be used for string concatenation, like so:</span></p><pre class=\"language-python\"><code>hike_caption = \"What an amazing time to walk through nature!\"\n\n# Almost forgot the hashtags!\nhike_caption += \" #nofilter\"\nhike_caption += \" #blessed\"</code></pre><p><span class=\"sentence\">We create the social media caption for the photograph of nature we took on our hike, but then update the caption to include important social media tags we almost forgot.</span></p><p><span class=\"sentence\">[x]Instructions [x]1. </span><span class=\"sentence\">We’re doing a little bit of online shopping and find a pair of new sneakers. </span><span class=\"sentence\">Right before we check out, we spot a nice sweater and some fun books we also want to purchase!</span></p><p><span class=\"sentence\">Use the += operator to update the total_price to include the prices of nice_sweater and fun_books.</span></p><p><span class=\"sentence\">The prices (also included in the workspace) are:</span></p><p><span class=\"sentence\">new_sneakers = 50.00 nice_sweater = 39.00 fun_books = 20.00 Concept Review Want to quickly review some of the concepts you’ve been learning? </span><span class=\"sentence\">Take a look at this material's cheatsheet! </span><span class=\"sentence\">Community Forums Get help and ask questions in the Codecademy Forums.</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"m","4":"u","5":"l","6":"t","7":"i","8":"l","9":"i","10":"n","11":"e","12":"s","13":"t","14":"r","15":"i","16":"n","17":"g","18":"s","id":"step-14","section":"interactive-lesson","goals":["next-0"],"html":"<x-step id=\"step-14\" goals=\"next-0\"><h2>Multi-line Strings</h2><p><span class=\"sentence\">We should have learned this poem in Chinese class: </span><span class=\"sentence\">\"Dēng guàn què lóu\" (Dēng guàn què lóu). </span><span class=\"sentence\">This poem is a poem written by the poet Wang Zhihuan in the Tang Dynasty.</span></p><p><span class=\"sentence\">The first two sentences of this poem are about natural scenery, but when you start, you can shrink thousands of miles and make thousands of miles away. </span><span class=\"sentence\">The second two sentences are freehand and unexpected, melting the philosophy, scenery, and situation seamlessly.</span></p><p><span class=\"sentence\">The poet's soul shocked by nature realizes the simple and profound philosophy, which can urge people to abandon the simple insights that stand still, climb high and look forward, and constantly open up new and better realms.</span></p><p><span class=\"sentence\">Poetry critics in the Qing Dynasty believed that: </span><span class=\"sentence\">\"Wang's poem is short with two crosses, the front cross has the effect of being exhausted, and the back cross has the potential to be thousands of miles in size.\" This poem is the volume of the five-character poem in the Tang Dynasty. </span><span class=\"sentence\">The quatrains have been named for the ages, and the Guanquelou is also famous in China for this poem.</span></p><p><span class=\"sentence\">Although this poem has only two crosses, it uses a huge rafter to depict the majestic and magnificent scenes of the rivers and mountains of the North. </span><span class=\"sentence\">It is magnificent and profound, and has been inspiring the Chinese nation for thousands of years.</span></p><p><span class=\"sentence\">Especially the last two sentences are often quoted to express the attitude of active exploration and infinite progress in life. </span><span class=\"sentence\">To this day, this poem still appears on major political and diplomatic occasions in China from time to time.</span></p><p><span class=\"sentence\">Usually we have a poem in the form of a whole, but this poem has spaces, line breaks, and uneven positions. </span><span class=\"sentence\">How can we show this whole in code? </span><span class=\"sentence\">It is not suitable to use string concatenation because it is too long. </span><span class=\"sentence\">Is there any other way? </span><span class=\"sentence\">The answer is of course there is, first look at the following example, click on each single sentence, it will move to our big box.</span></p> <style> .one-text {\n            animation: moveto1 3s 1 forwards;\n        }\n\n        @keyframes moveto1 {\n            from {\n                transform: translate(60, 60);\n            }\n\n            to {\n                transform: translate(350px, 120px);\n            }\n        }\n\n        .two-text {\n            animation: moveto2 3s 1 forwards;\n        }\n\n        @keyframes moveto2 {\n            from {\n                transform: translate(10, 30);\n            }\n\n            to {\n                transform: translate(350px, 70px);\n            }\n        }\n\n        \n        .three-text {\n            animation: moveto3 3s 1 forwards;\n        }\n\n        @keyframes moveto3 {\n            from {\n                transform: translate(10, 30);\n            }\n\n            to {\n                transform: translate(350px, 30px);\n            }\n        }\n\n        \n        .four-text {\n            animation: moveto4 3s 1 forwards;\n        }\n\n        @keyframes moveto4 {\n            from {\n                transform: translate(10, 30);\n            }\n\n            to {\n                transform: translate(350px, -20px);\n            }\n        } </style> <svg width=\"700\" height=\"440\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"> <rect x=\"320\" y=\"0\" width=\"350\" height=\"430\" style=\"fill:rgb(85,187,197);stroke-width:5;stroke:rgb(255,255,0)\"></rect> <rect onclick=\"onebtn();\" id=\"one\" x=\"0\" y=\"0\" width=\"300\" height=\"100\" style=\"fill:rgb(85,187,197);stroke-width:3;stroke:rgb(66,221,91)\"></rect> <rect onclick=\"twobtn();\" id=\"two\" x=\"0\" y=\"110\" width=\"300\" height=\"100\" style=\"fill:rgb(85,187,197);stroke-width:3;stroke:rgb(66,221,91)\"></rect> <rect onclick=\"threebtn();\" x=\"0\" y=\"220\" width=\"300\" height=\"100\" style=\"fill:rgb(85,187,197);stroke-width:3;stroke:rgb(66,221,91)\"></rect> <rect onclick=\"fourbtn();\" x=\"0\" y=\"330\" width=\"300\" height=\"100\" style=\"fill:rgb(85,187,197);stroke-width:3;stroke:rgb(66,221,91)\"></rect> <text x=\"400\" y=\"60\" fill=\"black\" style=\"font-size: xxx-large;\">登鹳雀楼</text> <text x=\"480\" y=\"110\" fill=\"black\" style=\"font-size: x-large;\">作者：王之涣</text> <text id=\"one-text\" x=\"60\" y=\"60\" fill=\"black\" style=\"font-size: xx-large;\">白日依山尽</text> <text id=\"two-text\" x=\"60\" y=\"170\" fill=\"black\" style=\"font-size: xx-large;\">黄河入海流</text> <text id=\"three-text\" x=\"60\" y=\"270\" fill=\"black\" style=\"font-size: xx-large;\">欲穷千里目</text> <text id=\"four-text\" x=\"60\" y=\"380\" fill=\"black\" style=\"font-size: xx-large;\">更上一层楼</text> </svg> <script> function onebtn() {\n            var one = document.getElementById(\"one-text\");\n            one.setAttribute(\"class\",\"one-text\");\n        }\n\n        function twobtn() {\n            var two = document.getElementById(\"two-text\");\n            two.setAttribute(\"class\",\"two-text\");\n        }\n\n        function threebtn() {\n            var three = document.getElementById(\"three-text\");\n            three.setAttribute(\"class\",\"three-text\");\n        }\n\n        function fourbtn() {\n            var four = document.getElementById(\"four-text\");\n            four.setAttribute(\"class\",\"four-text\");\n        } </script> <p><span class=\"sentence\">The above small example illustrates how important it is to speak clearly at one time. </span><span class=\"sentence\">At this time, it involves our knowledge points, multi-line strings Python strings are very flexible, but if we try to create a string that occupies multiple lines we find ourselves face-to-face with a <em class=\"code\">SyntaxError</em> . </span><span class=\"sentence\">Python offers a solution: </span><span class=\"sentence\">multi-line strings. </span><span class=\"sentence\">By using three quote-marks ( <em class=\"code\">\"\"\"</em> or <em class=\"code\">'''</em> ) instead of one, we tell the program that the string doesn’t end until the next triple-quote. </span><span class=\"sentence\">This method is useful if the string being defined contains a lot of quotation marks and we want to be sure we don’t close it prematurely.</span></p><pre class=\"language-python\"><code>leaves_of_grass = \"\"\"\nPoets to come! orators, singers, musicians to come!\nNot to-day is to justify me and answer what I am for,\nBut you, a new brood, native, athletic, continental, greater than\n  before known,\nArouse! for you must justify me.\n\"\"\"</code></pre><p><span class=\"sentence\">In the above example, we assign a famous poet’s words to a variable. </span><span class=\"sentence\">Even though the quote contains multiple linebreaks, the code works!</span></p><p><span class=\"sentence\">If a multi-line string isn’t assigned a variable or used in an expression it is treated as a comment.</span></p><h4>Instructions</h4><p><span class=\"sentence\"><input id=\"multilinestrings\" type=\"checkbox\" disabled=\"disabled\"> 1.Assign the string </span></p><pre class=\"language-python\"><code>  Stranger, if you passing meet me and desire to speak to me, why\n  should you not speak to me?\nAnd why should I not speak to you?</code></pre><p><span class=\"sentence\">to the variable <em class=\"code\">to_you</em> .</span></p><p><span class=\"sentence\"><button class=\"next-step\">Continue</button></span></p></x-step>"},{"0":"i","1":"d","2":":","3":"r","4":"e","5":"v","6":"i","7":"e","8":"w","id":"step-15","section":"interactive-lesson","goals":[],"html":"<x-step id=\"step-15\" goals=\"\"><h2>Review</h2><p><span class=\"sentence\">In this lesson, we accomplished a lot of things! </span><span class=\"sentence\">We instructed our computers to print messages, we stored these messages as variables, and we learned to update those messages depending on the part of the program we were in. </span><span class=\"sentence\">We performed mathematical calculations and explored some of the mathematical expressions that Python offers us. </span><span class=\"sentence\">We learned about errors and other valuable skills that will continue to serve us as we develop our programming skills.</span></p><p><span class=\"sentence\">Good job!</span></p><h4>Instructions</h4><p><span class=\"sentence\"><input id=\"review\" type=\"checkbox\" disabled=\"disabled\"> 1.Create variables:</span></p><ul> <li><span class=\"sentence\"><em class=\"code\">my_age</em></span></li><li><span class=\"sentence\"><em class=\"code\">half_my_age</em></span></li><li><span class=\"sentence\"><em class=\"code\">greeting</em></span></li><li><span class=\"sentence\"><em class=\"code\">name</em></span></li><li><span class=\"sentence\"><em class=\"code\">greeting_with_name</em></span></li></ul> <p><span class=\"sentence\">Assign values to each using your knowledge of division and concatenation!</span></p></x-step>"},{"id":"step-16","section":"freeform-project","goals":[],"html":"<x-step id=\"step-16\" goals=\"\"></x-step>"},{"0":"i","1":"d","2":":","3":"c","4":"r","5":"e","6":"a","7":"t","8":"e","9":"i","10":"n","11":"f","12":"o","id":"step-17","section":"freeform-project","goals":[],"html":"<x-step id=\"step-17\" goals=\"\"><h2>Create Purchasing Information and Receipts for Lovely Loveseats</h2><p><span class=\"sentence\">We’ve decided to pursue the dream of small-business ownership and open up a furniture store called Lovely Loveseats for Neat Suites on Fleet Street. </span><span class=\"sentence\">With our newfound knowledge of Python programming, we’re going to build a system to help speed up the process of creating receipts for your customers.</span></p><p><span class=\"sentence\">In this project, we will be storing the names and prices of a furniture store’s catalog in variables. </span><span class=\"sentence\">You will then process the total price and item list of customers, printing them to the output terminal.</span></p><p><span class=\"sentence\"><strong>Please note:</strong> </span><span class=\"sentence\">Projects do not run tests against your code. </span><span class=\"sentence\">This experience is more open to your interpretation and gives you the freedom to explore. </span><span class=\"sentence\">Remember that all variables must be declared before they are referenced in your code.</span></p><p><span class=\"sentence\">If you get stuck during this project or would like to see an experienced developer work through it, click <strong>“Get Help“</strong> to see a <strong>project walkthrough video</strong>.</span></p><p class=\"code\"><span class=\"sentence\"> Tasks 20/20Complete</span></p><p><span class=\"sentence\">Mark the tasks as complete by checking them off</span></p><p><span class=\"sentence\"><strong>Adding In The Catalog</strong></span></p><p><span class=\"sentence\">[]1. </span><span class=\"sentence\">Let’s add in our first item, the Lovely Loveseat that is the store’s namesake. </span><span class=\"sentence\">Create a variable called <em class=\"code\">lovely_loveseat_description</em> and assign to it the following string:</span></p><pre class=\"language-python\"><code>Lovely Loveseat. Tufted polyester blend on wood. 32 inches high x 40 inches wide x 30 inches deep. Red or white.</code></pre><button class=\"btn btn-green\"> Stuck? Get a hint</button><p><span class=\"sentence\">Hint</span></p><p><span class=\"sentence\">Recall string assignment syntax:</span></p><pre class=\"language-python\"><code>variable_name = \"This is a string\"</code></pre><p><span class=\"sentence\">2. </span><span class=\"sentence\">Great, now let’s create a price for the loveseat. </span><span class=\"sentence\">Create a variable lovely_loveseat_price and set it equal to 254.00.</span></p><button class=\"btn btn-green\">Stuck? Get a hint</button><p><span class=\"sentence\">3. </span><span class=\"sentence\">Let’s extend our inventory with another characteristic piece of furniture! </span><span class=\"sentence\">Create a variable called stylish_settee_description and assign to it the following string:</span></p><p><span class=\"sentence\">Stylish Settee. </span><span class=\"sentence\">Faux leather on birch. </span><span class=\"sentence\">29.50 inches high x 54.75 inches wide x 28 inches deep. </span><span class=\"sentence\">Black. </span><span class=\"sentence\">4. </span><span class=\"sentence\">Now let’s set the price for our Stylish Settee. </span><span class=\"sentence\">Create a variable stylish_settee_price and assign it the value of 180.50.</span></p><p><span class=\"sentence\">5. </span><span class=\"sentence\">Fantastic, we just need one more item before we’re ready for business. </span><span class=\"sentence\">Create a new variable called luxurious_lamp_description and assign it the following:</span></p><p><span class=\"sentence\">Luxurious Lamp. </span><span class=\"sentence\">Glass and iron. </span><span class=\"sentence\">36 inches tall. </span><span class=\"sentence\">Brown with cream shade. </span><span class=\"sentence\">6. </span><span class=\"sentence\">Let’s set the price for this item. </span><span class=\"sentence\">Create a variable called luxurious_lamp_price and set it equal to 52.15.</span></p><p><span class=\"sentence\">7. </span><span class=\"sentence\">In order to be a business, we should also be calculating sales tax. </span><span class=\"sentence\">Let’s store that in a variable as well.</span></p><p><span class=\"sentence\">Define the variable sales_tax and set it equal to .088. </span><span class=\"sentence\">That’s 8.8%.</span></p><p><span class=\"sentence\">Our First Customer 8. </span><span class=\"sentence\">Our first customer is making their purchase! </span><span class=\"sentence\">Let’s keep a running tally of their expenses by defining a variable called customer_one_total. </span><span class=\"sentence\">Since they haven’t purchased anything yet, let’s set that variable equal to 0 for now.</span></p><p><span class=\"sentence\">9. </span><span class=\"sentence\">We should also keep a list of the descriptions of things they’re purchasing. </span><span class=\"sentence\">Create a variable called customer_one_itemization and set that equal to the empty string \"\". </span><span class=\"sentence\">We’ll tack on the descriptions to this as they make their purchases.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 10. </span><span class=\"sentence\">Our customer has decided they are going to purchase our Lovely Loveseat! </span><span class=\"sentence\">Add the price to customer_one_total.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 11. </span><span class=\"sentence\">Let’s start keeping track of the items our customer purchased. </span><span class=\"sentence\">Add the description of the Lovely Loveseat to customer_one_itemization.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 12. </span><span class=\"sentence\">Our customer has also decided to purchase the Luxurious Lamp! </span><span class=\"sentence\">Let’s add the price to the customer’s total.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 13. </span><span class=\"sentence\">Let’s keep the itemization up-to-date and add the description of the Luxurious Lamp to our itemization.</span></p><p><span class=\"sentence\">14. </span><span class=\"sentence\">They’re ready to check out! </span><span class=\"sentence\">Let’s begin by calculating sales tax. </span><span class=\"sentence\">Create a variable called customer_one_tax and set it equal to customer_one_total times sales_tax.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 15. </span><span class=\"sentence\">Add the sales tax to the customer’s total cost.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 16. </span><span class=\"sentence\">Let’s start printing up their receipt! </span><span class=\"sentence\">Begin by printing out the heading for their itemization. </span><span class=\"sentence\">Print the phrase \"Customer One Items:\".</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 17. </span><span class=\"sentence\">Print customer_one_itemization.</span></p><p><span class=\"sentence\">Stuck? </span><span class=\"sentence\">Get a hint 18. </span><span class=\"sentence\">Now add a heading for their total cost: </span><span class=\"sentence\">Print out \"Customer One Total:\"</span></p><p><span class=\"sentence\">19. </span><span class=\"sentence\">Now print out their total! </span><span class=\"sentence\">Our first customer now has a receipt for the things they purchased.</span></p><p><span class=\"sentence\">20. </span><span class=\"sentence\">Congratulations! </span><span class=\"sentence\">We created our catalog and served our first customer. </span><span class=\"sentence\">We used our knowledge of strings and numbers to create and update variables. </span><span class=\"sentence\">We were able to print out an itemized list and a total cost for our customer. </span><span class=\"sentence\">Lovely!</span></p><p><span class=\"sentence\">Create Purchasing Information and Receipts for Lovely Loveseats 20/20Complete</span></p></x-step>"},{"id":"step-18","section":"multiple-quiz","goals":[],"html":"<x-step id=\"step-18\" goals=\"\"><p><span class=\"sentence\"><strong>What is Python syntax for creating a variable and assigning the number 10 to it?</strong></span></p><p><span class=\"sentence\">def variable_name = 10</span></p><p><span class=\"sentence\">variable_name = 10</span></p><p><span class=\"sentence\">variable_name == 10</span></p><p><span class=\"sentence\">new variable_name = 10</span></p><p><span class=\"sentence\"><strong>What is the value of total_cost that gets printed?</strong></span></p><pre class=\"language-python\"><code>total_cost = 5\n\ntotal_cost += 10\n\nprint(total_cost)</code></pre><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">10</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">5</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">15</span></p><p><span class=\"sentence\"><strong>What happens when running the following code?</strong></span></p><pre class=\"language-python\"><code>message = What a cool message!\nprint(message)</code></pre><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">“What a cool message!” gets printed to the console.</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">“message” is printed.</span></p><p><span class=\"sentence\">(Selected)Correct:</span></p><p><span class=\"sentence\"><strong>Python throws a SyntaxError because the string is not surrounded by quotes.</strong></span></p><p><span class=\"sentence\">What character begins a comment in Python?</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">*</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">#</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">%</span></p><p><span class=\"sentence\"><strong>What is the output of the following code?</strong></span></p><pre class=\"language-python\"><code>cool_number = 12 + 30\ncool_number * 5\nprint(cool_number)</code></pre><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">210</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">42</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">cool_number</span></p><p><span class=\"sentence\"><strong>What is the difference between a float and an int?</strong></span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">A float represents decimal quantities. </span><span class=\"sentence\">An int represents whole numbers.</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">A float contains text information. </span><span class=\"sentence\">An int is any number.</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">A float can only be used with whole numbers. </span><span class=\"sentence\">An int can be any number with a decimal point.</span></p><p><span class=\"sentence\"><strong>What is the value of modulo_variable in the following expression?</strong></span></p><pre class=\"language-python\"><code>modulo_variable = 14 % 4</code></pre><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">2</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">3.5</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">56</span></p><p><span class=\"sentence\"><strong>Which of the following will produce a SyntaxError?</strong></span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">answer = \"Is this an error\"</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">answer = is_this_an_error</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">answer = \"Is this an error'</span></p><p><span class=\"sentence\"><strong>How does one define a multi-line string in Python?</strong></span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">\"\"\" Like This \"\"\" Incorrect:</span></p></x-step>"},{"id":"step-19","section":"multiple-quiz","goals":[],"html":"<x-step id=\"step-19\" goals=\"\"><p><span class=\"sentence\">Like This</span></p></x-step>"},{"id":"step-20","section":"multiple-quiz","goals":[],"html":"<x-step id=\"step-20\" goals=\"\"><p><span class=\"sentence\">Incorrect:</span></p><p><span class=\"sentence\">### Like This</span></p><p><span class=\"sentence\">###</span></p><p><span class=\"sentence\"><strong>Which of the following defined variables is a string?</strong></span></p><pre class=\"language-python\"><code>cool_variable_1 = 23.18\ncool_variable_2 = 9\ncool_variable_3 = \"Important Message!\"\ncool_variable_4 = 14 ** 3</code></pre><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">cool_variable_1</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">cool_variable_4</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">cool_variable_3</span></p><p><span class=\"sentence\"><strong>Which function outputs text to the terminal?</strong></span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">type()</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">write()</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">print()</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">output()</span></p><p><span class=\"sentence\"><strong>What is Python syntax for creating a variable and assigning the number 10 to it?</strong></span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">def variable_name = 10</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">variable_name == 10</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">variable_name = 10</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">new variable_name = 10</span></p><p><span class=\"sentence\"><strong>How do you combine two strings?</strong></span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">string1.combine(string2)</span></p><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">string1.concatenate(string2)</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">string1 + string2</span></p><p><span class=\"sentence\"><strong>What number is saved to exponented_variable in the following expression?</strong></span></p><pre class=\"language-python\"><code>exponented_variable = 2 ** 4</code></pre><p><span class=\"sentence\">Incorrect: </span><span class=\"sentence\">8</span></p><p><span class=\"sentence\">(Selected)Correct: </span><span class=\"sentence\">16</span></p></x-step>"},{"id":"step-21","section":"user-input-article","goals":[],"html":"<x-step id=\"step-21\" goals=\"\"><h2>How to assign variables with user input.</h2><p><span class=\"sentence\">So far, we’ve covered how to assign variables values directly in a Python file. </span><span class=\"sentence\">However, we often want a user of a program to enter new information into the program.</span></p><p><span class=\"sentence\">How can we do this? </span><span class=\"sentence\">As it turns out, another way to assign a value to a variable is through user input.</span></p><p><span class=\"sentence\">While we output a variable’s value using print(), we assign information to a variable using input(). </span><span class=\"sentence\">The input() function requires a prompt message, which it will print out for the user before they enter the new information. </span><span class=\"sentence\">For example:</span></p><pre class=\"language-python\"><code>likes_snakes = input(\"Do you like snakes? \")</code></pre><p><span class=\"sentence\">In the example above, the following would occur:</span></p><p><span class=\"sentence\">The program would print “Do you like snakes? </span><span class=\"sentence\">“ for the user. </span><span class=\"sentence\">The user would enter an answer (e.g., “Yes! </span><span class=\"sentence\">I have seven pythons as pets!”). </span><span class=\"sentence\">The variable likes_snakes would be assigned a value of the user’s answer (in this case, “Yes! </span><span class=\"sentence\">I have seven pythons as pets!”). </span><span class=\"sentence\">Try constructing a statement to collect user input on your own!</span></p><p><span class=\"sentence\">Fill in the blanks in the code to complete a statement that asks a user “What is your favorite flightless bird?” and then stores their answer in the variable favorite_flightless_bird.</span></p><p><span class=\"sentence\">Not only can input() be used for collecting all sorts of different information from a user, but once you have that information stored as a variable you can use it to simulate interaction:</span></p><pre class=\"language-python\"><code>&gt;&gt;&gt; favorite_fruit = input(\"What is your favorite fruit? \")\nWhat is your favorite fruit? mango\n&gt;&gt;&gt; print(\"Oh cool! I like \" + favorite_fruit + \" too, but I think my favorite fruit is apple.\")\nOh yeah! I like mango too, but I think my favorite fruit is apple.</code></pre><p><span class=\"sentence\">These are pretty basic implementations of input(), but as you get more familiar with Python you’ll find more and more interesting scenarios where you will want to interact with your users.</span></p></x-step>"}],"goals":14,"title":"Syntax"}